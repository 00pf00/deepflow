syntax = "proto2";

package DFI;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;

option go_package = "dfi";


message DataLinkLayer {
	optional  string mac_0 = 1;
	optional  string mac_1 = 2;
	optional  uint32 eth_type = 3;
	repeated  string cast_types_0 = 4;
	repeated  string cast_types_1 = 5;
	repeated  string packet_sizes_0 = 6;
	repeated  string packet_sizes_1 = 7;
	optional  uint32 vlan = 8;
}

message NetworkLayer {
	optional string ip_0 = 1;
	optional string ip_1 = 2;
	optional string real_ip_0 = 3;
	optional string real_ip_1 = 4;
	optional uint32 ip_version = 5;
	optional uint32 protocol = 6;
	optional uint32 tunnel_tier = 7;
	optional uint32 tunnel_type = 8 ;
	optional uint32 tunnel_tx_id = 9;
	optional uint32 tunnel_rx_id = 10;
	optional string tunnel_tx_ip_0 = 11;
	optional string tunnel_tx_ip_1 = 12;
	optional string tunnel_rx_ip_0 = 13;
	optional string tunnel_rx_ip_1 = 14;
	repeated string ttls_0 = 15;
	repeated string ttls_1 = 16;
}

message TransportLayer {
	optional uint32 client_port = 1;
	optional uint32 server_port = 2;
	repeated uint32 tcp_flags_0 = 3;
	repeated uint32 tcp_flags_1 = 4;
	optional uint32 tcp_flags_bit_0 = 5;
	optional uint32 tcp_flags_bit_1 = 6;
}

message ApplicationLayer {
	optional string l7_protocol  = 1;
}

message Internet {
	optional string province_0 = 1;
	optional string province_1 = 2;
}

message KnowledgeGraph {
	optional uint32 region_id_0 = 1;
	optional uint32 region_id_1 = 2;
	optional uint32 az_id_0 = 3;
	optional uint32 az_id_1 = 4;
	optional uint32 host_id_0 = 5;
	optional uint32 host_id_1 = 6;
	optional uint32 l3_device_type_0 = 7;
	optional uint32 l3_device_type_1 = 8;
	optional uint32 l3_device_id_0 = 9;
	optional uint32 l3_device_id_1 = 10;
	optional uint32 pod_node_id_0 = 11;
	optional uint32 pod_node_id_1 = 12;
	optional uint32 pod_ns_id_0 = 13;
	optional uint32 pod_ns_id_1 = 14;
	optional uint32 pod_group_id_0 = 15;
	optional uint32 pod_group_id_1 = 16;
	optional uint32 pod_id_0 = 17;
	optional uint32 pod_id_1 = 18;
	optional uint32 pod_cluster_id_0 = 19;
	optional uint32 pod_cluster_id_1 = 20;
	optional int32  l3_epc_id_0 = 21;
	optional int32  l3_epc_id_1 = 22;
	optional int32  epc_id_0 = 23;
	optional int32  epc_id_1 = 24;
	optional uint32 subnet_id_0 = 25;
	optional uint32 subnet_id_1 = 26;
}

message FlowInfo {
	optional uint32 close_type = 1;
	optional uint32 flow_source = 2;
	optional string flow_id_str = 3;
	optional uint32 tap_type = 4;
	optional string tap_port = 5;
	optional uint32 vtap_id = 6;
	optional bool   tap_side_0 = 7;
	optional bool   tap_side_1 = 8;
	optional bool   l2_end_0 = 9;
	optional bool   l2_end_1 = 10;
	optional bool   l3_end_0 = 11;
	optional bool   l3_end_1 = 12;
	optional uint64 start_time = 13;
	optional uint64 end_time = 14;
	optional uint64 duration = 15;

}

message Metrics {
	optional uint64 packet_tx = 1;
	optional uint64 packet_rx = 2;
	optional uint64 byte_tx = 3;
	optional uint64 byte_rx = 4;
	optional uint64 l3_byte_tx = 5;
	optional uint64 l3_byte_rx = 6;
	optional uint64 l4_byte_tx = 7;
	optional uint64 l4_byte_rx = 8;
	optional uint64 total_packet_tx = 9;
	optional uint64 total_packet_rx = 10;
	optional uint64 total_byte_tx = 11;
	optional uint64 total_byte_rx = 12;
	optional uint32 l7_request = 13;
	optional uint32 l7_response = 14;
	optional uint32 rtt_client = 15;
	optional uint32 rtt_server = 16;
	optional uint32 rtt = 17;
	optional uint32 srt = 18;
	optional uint32 art = 19;
	optional uint32 rrt = 20;
	optional uint32 rtt_client_max = 21;
	optional uint32 rtt_server_max = 22;
	optional uint32 srt_max = 23;
	optional uint32 art_max = 24;
	optional uint32 rrt_max = 25;
	optional uint32 retrans_tx = 26;
	optional uint32 retrans_rx = 27;
	optional uint32 zero_win_tx = 28;
	optional uint32 zero_win_rx = 29;
	optional uint32 l7_client_error = 30;
	optional uint32 l7_server_error = 31;
	optional uint32 l7_server_timeout = 32;
}

message L4Flow {
	optional DataLinkLayer data_link_layer = 1;
	optional NetworkLayer network_layer = 2;
	optional ApplicationLayer application_layer = 3;
	optional Internet  internet = 4;
	optional KnowledgeGraph  knowledge_graph = 5;
	optional FlowInfo flowinfo = 6;
	optional Metrics  metrics = 7;
}

message L7Base {
	optional string ip_0 = 1;
	optional string ip_1 = 2;
	optional string real_ip_0 = 3;
	optional string real_ip_1 = 4;
	optional uint32 client_port = 5;
	optional uint32 server_port = 6;
	optional KnowledgeGraph knowledge_graph = 7;
	optional string flow_id_str = 8;
	optional uint32 tap_type = 9;
	optional string tap_port = 10;
	optional uint32 vtap_id = 11;
	optional uint64 timestamp = 12;
}

message L7HTTP {
	optional L7Base base = 1;
	optional string type = 2;
	optional string version = 3;
	optional string method = 4;
	optional string client_ip = 5;
	optional string host = 6;
	optional string path = 7;
	optional uint32 stream_id = 8;
	optional string trace_id = 9;
	optional uint32 status_code = 10;
	optional int64  content_length = 11;
	optional uint64 duration = 12;
}

message L7DNS {
	optional L7Base base = 1;
	optional string type = 2;
	optional uint32 id = 3;
	optional string domain_name = 4;
	optional uint32 query_type = 5;
	optional uint32 answer_code = 6;
	optional string answer_addr = 7;
	optional uint64 duration = 8;
}

enum FlowType {
	L4FlowType = 1;
	L7HTTPType = 2;
	L7DNSType = 3;
}

message Flow {
	required FlowType type = 1;
	optional L4Flow l4_flow = 2;
	optional L7HTTP l7_http = 3;
	optional L7DNS l7_dns = 4;
}

syntax = "proto2";

package trident;
option go_package = "trident";

service Synchronizer {
    rpc Sync (SyncRequest) returns (SyncResponse) {}
}

message AclStat {
    optional uint32 id = 1 [default = 0];
    optional uint64 packets = 2 [default = 0];
    optional uint64 bytes = 3 [default = 0];
}

message InterfaceAclStat {
    optional string mac = 1;
    repeated AclStat header_acls = 2;
    repeated AclStat packet_acls = 3;
}

message SyncRequest {
    optional uint32 boot_time = 1;
    optional bool config_accepted = 2 [default = true];
    optional uint64 version = 3 [default = 0];

    repeated InterfaceAclStat interface_acls = 5;
}

enum Status {
    SUCCESS = 0;
    FAILED = 1;
}

enum TapMode {
    LOCAL  = 0; // 部署在宿主机之上，抓取本地虚拟接口流量
    MIRROR = 1; // 部署在虚拟机或分析器之上，抓取镜像而来的流量
}

message Config {
    optional uint32 max_cpus = 1 [default = 2];
    optional uint32 sync_interval = 2 [default = 10];
    optional uint64 global_pps_threshold = 3 [default = 100000];
    optional string tap_interface_regex = 4;
    optional TapMode tap_mode = 5 [default = LOCAL];

    optional string output_interface = 10;
    optional uint32 output_vlan = 11 [default = 0];
    optional uint32 mtu = 12 [default = 1500];

    optional string source_mac = 20;
    optional string source_ip = 21;

    optional string analyzer_gw_mac = 30;
    optional string analyzer_ip = 31;
    optional string vtep_gw_mac = 32;
    optional string vtep_ip = 33;
}

enum Protocol {
    ANY = 0;
    ICMP = 1;
    TCP = 6;
    UDP = 17;
}

message Acl {
    optional uint32 id = 1 [default = 0];
    optional uint32 ip = 2 [default = 0];
    optional uint32 netmask = 3 [default = 0];
    optional uint32 port = 4 [default = 0];
    optional Protocol protocol = 5;

    optional uint32 payload_slice = 10;
}

message InterfaceAcl {
    optional uint32 vni = 1;
    optional string mac = 2;
    optional string tap_mac = 3;
    optional uint64 pps_threshold = 4 [default = 0];

    repeated Acl header_acls = 10;
    repeated Acl packet_acls = 11;
}

message Segment { // e.g. single LAN area
    optional uint32 id = 1;
    repeated string mac = 2;
    optional string tap_mac = 3;
}

message IpResource {
    optional string ip = 1;
    optional uint32 masklen = 2 [default = 32];
    optional uint32 subnet_id = 3 [default = 0];
}

message Interface {
    optional string mac = 1;
    optional uint32 device_type = 2;
    optional uint32 device_id = 3;
    optional uint32 if_type = 4;
    optional uint32 if_index = 5;
    optional uint32 epc_id = 6;
    optional string launch_server = 7;
    repeated IpResource ip_resources = 8;
    repeated uint32 group_ids = 9;
}

enum GroupType {
    VM = 0;
    IP = 1;
}

message Group {
    optional uint32 id = 1;
    optional uint32 epc_id = 2 [default = 0];
    optional GroupType type = 3;
    repeated uint32 vm_ids = 4;
    repeated string ips = 5;
}

message PlatformData {
    repeated Interface interfaces = 1;
    repeated Group ip_groups = 2;
}

enum TapType {
    ANY_TAP = 0;
    ISP = 1;      // 接入网络
    SPINE = 2;    // 物理网络
    TOR = 3;      // 虚拟网络
}

enum PolicyType {
    LABEL = 1;
    REPORT_POLICY = 2;
    ALARM_POLICY = 3;
    WHITELIST = 4;
}

enum Action {
    PACKECT_COUNTER = 1;
    FLOW_COUNTER = 2;
    FLOW_STORAGE = 3;
    TCP_PERFORMANCE = 4;
    PCAP = 5;
    MISC = 6;
    POLICY = 7;
    PACKECT_COUNTER_PUB = 8;
    FLOW_COUNTER_PUB = 9;
    TCP_PERFORMANCE_PUB = 10;
}

message Policy {
    optional uint32 id = 1;
    optional PolicyType type = 2;
}

enum TagTemplate {
    NODE = 1;
    NODE_PORT = 2;
    EDGE = 4;
    EDGE_PORT = 8;
    PORT = 16;
    POLICY_NODE = 32;
    POLICY_NODE_PORT = 64;
    POLICY_EDGE = 128;
    POLICY_EDGE_PORT = 256;
    POLICY_PORT = 512;
}

message FlowAction {
    optional Action action = 1;
    repeated Policy policies = 2;
    optional uint32 tag_template = 3;
}

message FlowAcl {
    optional uint32 id = 1;
    optional TapType tap_type = 2;
    optional uint32 tap_id = 3;
    optional string src_group_ids = 4;
    optional string dst_group_ids = 5;
    optional Protocol protocol = 6;
    optional string dst_ports = 8;
    optional uint32 vlan = 9;
    repeated FlowAction actions = 10;
}

message SyncResponse {
    optional Status status = 1;
    optional Config config = 2;
    optional uint64 version = 3 [default = 0]; /* in addition to config field */

    repeated InterfaceAcl interface_acls = 10;
    repeated Segment local_segments = 11;
    optional PlatformData platform_data = 12;
    repeated FlowAcl flow_acls = 13;
}

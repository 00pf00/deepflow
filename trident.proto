syntax = "proto2";

package trident;
option go_package = "trident";

import "common.proto";

service Synchronizer {
    rpc Sync (SyncRequest) returns (SyncResponse) {}
    rpc Push (SyncRequest) returns (stream SyncResponse) {}
    rpc AnalyzerSync (SyncRequest) returns (SyncResponse) {}
    rpc Upgrade (UpgradeRequest) returns (stream UpgradeResponse) {}
}

enum State {
    ENVIRONMENT_CHECK = 0; // 检查运行环境
    DISABLED          = 1; // 禁用
    RUNNING           = 2; // 正常运行
    REBOOTING         = 3; // 因配置变更等缘故触发重启
    STRESSED          = 4; // 负载太大产生丢包
    RESTRICTED        = 5; // 占用过多系统资源
}

enum Exception {
    NORMAL                     = 0;
    DISK_NOT_ENOUGH            = 1;
    MEM_NOT_ENOUGH             = 2;
    COREFILE_TOO_MANY          = 4;
    NPB_FUSE                   = 8;
    NPB_BPS_THRESHOLD_EXCEEDED = 16;
    NPB_NO_GW_ARP              = 32;
    RX_PPS_THRESHOLD_EXCEEDED  = 64;
    ANALYZER_NO_GW_ARP         = 128;
    INVALID_CONFIGURATION      = 256;
}

message SyncRequest {
    optional uint32 boot_time = 1;
    optional bool config_accepted = 2 [default = true];
    optional State state = 4;
    optional string revision = 5; // trident用于self-update
    optional uint64 exception = 6 [default = 0]; // trident exception status
    optional string process_name = 7;
    optional TapMode tap_mode = 8 [default = LOCAL];

    optional uint64 version_platform_data = 9 [default = 0]; /* only platform data */
    optional uint64 version_acls = 10 [default = 0];
    optional uint64 version_groups = 11 [default = 0];

    optional string ctrl_ip = 21;
    optional string host = 22; // 仅作为注册使用
    repeated string host_ips = 23; // 仅作为注册使用
    optional bool   is_virtual_machine = 24 [default = false];
}

enum Status {
    SUCCESS = 0;
    FAILED = 1;
    HEARTBEAT = 2;
}

enum TapMode {
    LOCAL  = 0; // 部署在宿主机之上，抓取本地虚拟接口流量
    MIRROR = 1; // 部署在虚拟机之上，抓取镜像而来的流量
    ANALYZER = 2; // 部署在分析器之上，抓取镜像而来的流量
}

enum IfMacSource {
    IF_MAC = 0;
    IF_NAME = 1;
}

enum SocketType {
    RAW_UDP = 0;
    TCP = 1;
    UDP = 2;
}

enum PacketType {
    PACKET = 1;
    SFLOW  = 2;
    NETFLOW_V5   = 3;
    NETSTREAM_V5 = 4;
    NETFLOW_V9   = 5;
    NETSTREAM_V9 = 6;
}

message TapType {
    optional uint32 tap_type = 1;
    optional PacketType packet_type = 2;
    optional uint32 vlan      = 3;
    optional string source_ip = 4;
    optional uint32 tap_port  = 5;
}

enum VlanMode {
    NONE = 0;
    VLAN = 1;
    QINQ = 2;
}

message Config {
    optional bool    enabled              = 1 [default = true];
    optional uint32  max_cpus             = 2 [default = 2];
    optional uint32  max_memory           = 3 [default = 768]; // in MiB
    optional uint32  sync_interval        = 4 [default = 60];
    optional uint32  stats_interval       = 5 [default = 60];
    optional uint64  global_pps_threshold = 6 [default = 100000];
    optional string  tap_interface_regex  = 8;
    optional string  host                 = 9;  // override statsd host tag
    optional bool    rsyslog_enabled      = 10 [default = false];
    optional uint32  output_vlan          = 11 [default = 0];
    optional uint32  mtu                  = 12 [default = 1500];
    optional uint64  npb_bps_threshold    = 13;
    optional bool    collector_enabled    = 14 [default = false];
    optional bool    packet_header_enabled = 15 [default = true];
    optional bool    platform_enabled     = 16 [default = false];
    optional uint64  server_tx_bandwidth_threshold = 18 [default = 0]; //bps
    optional uint64  bandwidth_probe_interval = 19 [default = 10];  //second
    optional bool    flow_store_enabled   = 21 [default = false];
    optional VlanMode npb_vlan_mode       = 22 [default = NONE];
    repeated uint32  flow_store_tap_types = 23;
    optional bool    npb_dedup_enabled    = 24 [default = true];
    optional IfMacSource if_mac_source = 25 [default = IF_MAC];
    optional bool    vtap_packet_1s_enabled = 26 [default = true];
    optional bool    vtap_flow_1s_enabled   = 27 [default = true];
    optional bool    debug_enabled   = 28 [default = true];

    optional string  analyzer_ip          = 31 [default = "127.0.0.1"];
    optional uint32  max_escape_seconds   = 32;

    optional string  proxy_controller_ip  = 34; // 控制器代理IP

    optional uint32 vtap_id = 40;  // 限制在64000
    optional common.TridentType trident_type = 41;

    optional SocketType collector_socket_type = 45 [default = UDP];
    optional SocketType compressor_socket_type = 46 [default = RAW_UDP];
    optional SocketType npb_socket_type = 47 [default = RAW_UDP];

    optional uint32 pcap_data_retention = 51 [default = 7]; // uint: day
}

message Segment { // e.g. single LAN area
    optional uint32 id = 1;
    repeated string mac = 2;
    optional uint64 tap_mac = 4; //0x0123456789ab = 01:23:45:67:89:ab
}

message IpResource {
    optional string ip = 1;
    optional uint32 masklen = 2 [default = 32];
    optional uint32 subnet_id = 3 [default = 0];
}

message Interface {
    optional uint32 device_type = 2;
    optional uint32 device_id = 3;
    optional uint32 if_type = 4;
    optional uint32 epc_id = 6;
    optional string launch_server = 7;
    repeated IpResource ip_resources = 8;
    optional uint32 launch_server_id = 9;
    optional uint32 region_id = 10;
    optional uint64 mac = 11; //0x0123456789ab = 01:23:45:67:89:ab
    optional uint32 pod_node_id = 21;
    optional uint32 az_id = 22;
    optional uint32 pod_group_id = 23;
    optional uint32 pod_ns_id = 24;
    optional uint32 pod_id = 25;
}

enum GroupType {
    NAMED = 0;
    ANONYMOUS = 1;
}

// 字段含义查看README
message Group {
    optional uint32 id = 1;
    optional uint32 epc_id = 2 [default = 0];
    optional GroupType type = 3;
    repeated string ips = 5;
    repeated string ip_ranges = 6;
}

message Groups {
    repeated Group groups = 1;
}

message PeerConnection {
    optional uint32 id = 1;
    optional uint32 local_epc_id = 2;
    optional uint32 remote_epc_id = 3;
}

enum CidrType {
   WAN = 1;
   LAN = 2;
}

message Cidr {
    optional string prefix = 1;
    optional CidrType type = 2;
    optional int32 epc_id = 3;
    optional uint32 subnet_id = 4;
    optional uint32 region_id = 5;
    optional uint32 az_id = 6;
    optional uint32 tunnel_id = 7;
}

message PlatformData {
    repeated Interface interfaces = 1;
    repeated PeerConnection peer_connections = 3;
    repeated Cidr cidrs = 4;
}

enum Action {
    PACKET_CAPTURING              = 1;  // 包存储（pcap）
}

enum TapSide {
    SRC = 1;
    DST = 2;
    BOTH = 3;
}

enum TunnelType {
    VXLAN = 0;
    GRE_ERSPAN = 1;
    PCAP = 2;
}

message NpbAction {
    optional TunnelType tunnel_type = 1 [default = VXLAN];
    optional uint32 tunnel_id = 2;
    optional string tunnel_ip = 3;
    optional TapSide tap_side = 4;
    optional uint32 payload_slice = 5 [default = 65535];
    optional uint32 npb_acl_group_id = 6;
    optional uint32 tunnel_ip_id = 7; // 分发点id, 限制在64000
}

// 字段含义查看README
message FlowAcl {
    optional uint32 id = 1;
    optional uint32 tap_type = 2;
    optional uint32 protocol = 6 [default = 256];
    optional string src_ports = 7;
    optional string dst_ports = 8;
    optional uint32 vlan = 9;
    repeated NpbAction npb_actions = 11;
    repeated int32 src_group_ids = 12;
    repeated int32 dst_group_ids = 13;
}

message FlowAcls {
    repeated FlowAcl flow_acl = 1;
}

message SyncResponse {
    optional Status status = 1;
    optional Config config = 2;
    optional string revision = 4; // 指定升级的目标revision
    optional string self_update_url = 5; // 指定升级的URL路径

    optional uint64 version_platform_data = 6 [default = 0]; /* only platform data */
    optional uint64 version_acls = 7 [default = 0];
    optional uint64 version_groups = 8 [default = 0];

    repeated Segment local_segments = 10;
    repeated Segment remote_segments = 11;
    optional bytes platform_data = 12;  // 仅变化时下发
    optional bytes flow_acls = 13;      // 仅变化时下发
    optional bytes groups = 15;         // 仅变化时下发
    repeated TapType tap_types = 16;
}

message UpgradeRequest  {
    optional string ctrl_ip = 1;
    optional uint32 trident_os = 2; // 0:linux, 1:windows
}
message UpgradeResponse  {
    optional Status status = 1;     // 调用是否成功
    optional bytes content = 2;     // 数据
    optional string md5 = 3;        // 文件MD5
    optional uint64 total_len = 4;  // 数据总长
    optional uint32 pkt_count = 5;  // 包总个数
}

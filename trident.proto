syntax = "proto2";

package trident;
option go_package = "trident";

service Synchronizer {
    rpc Sync (SyncRequest) returns (SyncResponse) {}
    rpc Push (SyncRequest) returns (stream SyncResponse) {}
}

enum State {
    ENVIRONMENT_CHECK = 0; // 检查运行环境
    DISABLED          = 1; // 禁用
    RUNNING           = 2; // 正常运行
    REBOOTING         = 3; // 因配置变更等缘故触发重启
    STRESSED          = 4; // 负载太大产生丢包
    RESTRICTED        = 5; // 占用过多系统资源
}

enum Exception {
    NORMAL             = 0;
    DISK_NOT_ENOUGH    = 1;
    MEM_NOT_ENOUGH     = 2;
    COREFILE_TOO_MANY  = 4;
    NPB_FUSE           = 8;
    NPB_NO_ROUTE       = 16; //deprecated in DF5.5.4
    NPB_NO_GW_ARP      = 32;
    ANALYZER_NO_ROUTE  = 64; //deprecated in DF5.5.4
    ANALYZER_NO_GW_ARP = 128;
}

message SyncRequest {
    optional uint32 boot_time = 1;
    optional bool config_accepted = 2 [default = true];
    optional uint64 version = 3 [default = 0];
    optional State state = 4;
    optional string revision = 5; // trident用于self-update
    optional uint64 exception = 6 [default = 0]; // trident exception status
    optional string process_name = 7;
    optional TapMode tap_mode = 8 [default = LOCAL];

    optional string ctrl_ip = 21;
    optional string host = 22; // 仅作为注册使用
}

enum Status {
    SUCCESS = 0;
    FAILED = 1;
    HEARTBEAT = 2;
}

enum TapMode {
    LOCAL  = 0; // 部署在宿主机之上，抓取本地虚拟接口流量
    MIRROR = 1; // 部署在虚拟机之上，抓取镜像而来的流量
    ANALYZER = 2; // 部署在分析器之上，抓取镜像而来的流量
}

message Config {
    optional bool    enabled              = 1 [default = true];
    optional uint32  max_cpus             = 2 [default = 2];
    optional uint32  max_memory           = 3 [default = 768]; // in MiB
    optional uint32  sync_interval        = 4 [default = 60];
    optional uint32  stats_interval       = 5 [default = 60];
    optional uint64  global_pps_threshold = 6 [default = 100000];
    optional string  tap_interface_regex  = 8;
    optional string  host                 = 9;  // override statsd host tag
    optional bool    rsyslog_enabled      = 10 [default = false];
    optional uint32  output_vlan          = 11 [default = 0];
    optional uint32  mtu                  = 12 [default = 1500];
    optional uint64  npb_bps_threshold    = 13;
    optional bool    collector_enabled    = 14 [default = false];
    optional bool    packet_header_enabled = 15 [default = true];
    optional bool    platform_enabled     = 16 [default = false];
    optional uint32  platform_interval    = 17;
    optional uint64  server_tx_bandwidth_threshold = 18 [default = 0]; //bps
    optional uint64  bandwidth_probe_interval = 19 [default = 10];  //second

    optional string  analyzer_ip          = 31;
    optional uint32  max_escape_seconds   = 32;

    repeated string  corefile_dirs        = 33;
}

message Segment { // e.g. single LAN area
    optional uint32 id = 1;
    repeated string mac = 2;
    optional string tap_mac = 3;
}

message IpResource {
    optional string ip = 1;
    optional uint32 masklen = 2 [default = 32];
    optional uint32 subnet_id = 3 [default = 0];
}

message Interface {
    optional string mac = 1;
    optional uint32 device_type = 2;
    optional uint32 device_id = 3;
    optional uint32 if_type = 4;
    optional uint32 if_index = 5;
    optional uint32 epc_id = 6;
    optional string launch_server = 7;
    repeated IpResource ip_resources = 8;
    repeated uint32 group_ids = 9;
    optional uint32 region_id = 10;
}

enum GroupType {
    VM = 0;
    IP = 1;
    ANONYMOUS_VM = 2;
    ANONYMOUS_IP = 3;
}

message Group {
    optional uint32 id = 1;
    optional uint32 epc_id = 2 [default = 0];
    optional GroupType type = 3;
    repeated uint32 vm_ids = 4;
    repeated string ips = 5;
    repeated string ip_ranges = 6;
}

message PeerConnection {
    optional uint32 id = 1;
    optional uint32 local_epc_id = 2;
    optional uint32 remote_epc_id = 3;
}

message PlatformData {
    repeated Interface interfaces = 1;
    repeated Group ip_groups = 2;
    repeated PeerConnection peer_connections = 3;
}

enum Action {
    PACKET_COUNTING               = 1;  // 包统计
    FLOW_COUNTING                 = 2;  // 流统计
    FLOW_STORING                  = 3;  // 流存储
    TCP_FLOW_PERF_COUNTING        = 4;  // TCP性能量化统计
    PACKET_CAPTURING              = 5;  // 包存储（pcap）
    FLOW_MISC_COUNTING            = 6;  // 流杂项统计
    PACKET_BROKERING              = 7;  // 包分发
    GEO_POSITIONING               = 11; // 地理定位
}

enum TagTemplate {
    NODE = 1;
    NODE_PORT = 2;
    EDGE = 4;
    EDGE_PORT = 8;
    PORT = 16;
    ACL_NODE = 32;
    ACL_NODE_PORT = 64;
    ACL_EDGE = 128;
    ACL_EDGE_PORT = 256;
    ACL_PORT = 512;
    ACL_EDGE_PORT_ALL = 1024; // 白名单需统计所有端口号，无论是否活跃
    EDGE_PORT_ALL = 2048; // 资源用量APP专用
}

enum TapSide {
    SRC = 1;
    DST = 2;
    BOTH = 3;
}

message NpbAction {
    optional uint32 tunnel_id = 2;
    optional string tunnel_ip = 3;
    optional TapSide tap_side = 4;
    optional uint32 payload_slice = 5 [default = 65535];
}

message FlowAction {
    optional Action action = 1;
    repeated uint32 policy_acl_group_id = 2;
    optional uint32 tag_template = 3;
}

message FlowAcl {
    optional uint32 id = 1;
    optional uint32 tap_type = 2; // 3: in_port 0x3****, 0~2/4~30: in_port 0x1****
    optional string src_group_ids = 4;
    optional string dst_group_ids = 5;
    optional uint32 protocol = 6;
    optional string src_ports = 7;
    optional string dst_ports = 8;
    optional uint32 vlan = 9;
    repeated FlowAction actions = 10;
    repeated NpbAction npb_actions = 11;
}

message PublishAcl {
    optional uint32 id = 1;
    optional string database = 2;
    optional uint64 measurement = 3;
    optional uint64 tag_code = 4;

    optional uint32 tap_type = 10; // 3: in_port 0x3****, 0~2/4~30: in_port 0x1****
    optional uint32 acl_gid = 11;
    optional int32 l3_epc_id = 12;
    optional uint32 l3_device_type = 13;
    optional uint32 l3_device_id = 14;
    optional uint32 l3_epc_id_0 = 15;
    optional uint32 l3_epc_id_1 = 16;

    optional uint32 scope = 30;
    optional uint32 protocol = 31;
}

message SyncResponse {
    optional Status status = 1;
    optional Config config = 2;
    optional uint64 version = 3 [default = 0]; /* in addition to config field */
    optional string revision = 4; // 指定升级的目标revision
    optional string self_update_url = 5; // 指定升级的URL路径

    repeated Segment local_segments = 10;
    repeated Segment remote_segments = 11;
    optional PlatformData platform_data = 12;
    repeated FlowAcl flow_acls = 13;
    repeated PublishAcl publish_acls = 14;
}

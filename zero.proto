syntax = "proto2";

option go_package = "zero";

enum DeviceType {
    VM = 1;
    THIRD_PARTY = 3;
    VGATEWAY = 5;
    HOST = 6;
    NETWORK = 7;
    FLOATING_IP = 8;
    DHCP = 9;
}

enum Direction {
    CLIENT_TO_SERVER = 0;
    SERVER_TO_CLIENT = 1;
    ANY = 2;
}

enum PolicyType {
    CUSTOM_TAG = 0;
    WHITELIST = 1;
}

enum TapType {
    OVS = 0;
    ISP = 1;
    SPINE = 2;
    TOR = 3;
}

message Tag {
    optional string id = 1;
    optional uint64 code = 2;

    optional string ip = 4;
    optional string mac = 5;
    optional uint32 group_id = 6;
    optional int32 l2_epc_id = 7;
    optional int32 l3_epc_id = 8;
    optional uint32 l2_device_id = 9;
    optional DeviceType l2_device_type = 10;
    optional uint32 l3_device_id = 11;
    optional DeviceType l3_device_type = 12;

    optional string ip_0 = 16;
    optional string ip_1 = 17;
    optional string mac_0 = 18;
    optional string mac_1 = 19;
    optional uint32 group_id_0 = 20;
    optional uint32 group_id_1 = 21;
    optional int32 l2_epc_id_0 = 22;
    optional int32 l2_epc_id_1 = 23;
    optional int32 l3_epc_id_0 = 24;
    optional int32 l3_epc_id_1 = 25;
    optional uint32 l2_device_id_0 = 26;
    optional DeviceType l2_device_type_0 = 27;
    optional uint32 l2_device_id_1 = 28;
    optional DeviceType l2_device_type_1 = 29;
    optional uint32 l3_device_id_0 = 30;
    optional DeviceType l3_device_type_0 = 31;
    optional uint32 l3_device_id_1 = 32;
    optional DeviceType l3_device_type_1 = 33;

    optional Direction direction = 40;
    optional uint32 policy_id = 41;
    optional PolicyType policy_type = 42;
    optional uint32 vlan_id = 43;
    optional uint32 protocol = 44;
    optional uint32 server_port = 45;
    optional string host = 46;
    optional string vtap = 47;
    optional TapType tap_type = 48;
    optional uint32 subnet_id = 49;
}

message UsageMeterSum {
    optional uint64 packet_tx = 1;
    optional uint64 packet_rx = 2;
    optional uint64 packet = 3;
    optional uint64 bit_tx = 4;
    optional uint64 bit_rx = 5;
    optional uint64 bit = 6;
}

message UsageMeterMax {
    optional uint64 packet_tx = 1;
    optional uint64 packet_rx = 2;
    optional uint64 packet = 3;
    optional uint64 bit_tx = 4;
    optional uint64 bit_rx = 5;
    optional uint64 bit = 6;
}

message UsageMeterMin {
    optional uint64 bit_tx = 4;
    optional uint64 bit_rx = 5;
    optional uint64 bit = 6;
}

message UsageMeter {
    optional UsageMeterSum sum = 1;
    optional UsageMeterMax max = 2;
    optional UsageMeterMin min = 3;
}

message PerfMeterSum {
    optional uint64 flow_count = 1;
    optional uint64 closed_flow_count = 2;
    optional uint64 retrans_flow_count = 3;
    optional uint64 rtt_syn = 4;
    optional uint64 rtt_avg = 5;
    optional uint64 rtt_syn_flow = 6;
    optional uint64 rtt_avg_flow = 7;
    optional uint64 rtt_syn_per_flow = 8;
    optional uint64 rtt_avg_per_flow = 9;
    optional uint64 syn_retrans_cnt_tx = 10;
    optional uint64 syn_retrans_cnt_rx = 11;
    optional uint64 syn_retrans_cnt = 12;
    optional uint64 retrans_cnt_tx = 13;
    optional uint64 retrans_cnt_rx = 14;
    optional uint64 retrans_cnt = 15;
    optional uint64 zero_wnd_cnt_tx = 16;
    optional uint64 zero_wnd_cnt_rx = 17;
    optional uint64 zero_wnd_cnt = 18;
    optional uint64 slow_start_cnt_tx = 19;
    optional uint64 slow_start_cnt_rx = 20;
    optional uint64 slow_start_cnt = 21;
    optional uint64 psh_urg_cnt_tx = 22;
    optional uint64 psh_urg_cnt_rx = 23;
    optional uint64 psh_urg_cnt = 24;
}

message PerfMeterMax {
    optional uint64 flow_count = 1;
    optional uint64 closed_flow_count = 2;
    optional uint64 rtt_syn = 3;
    optional uint64 rtt_avg = 4;
}

message PerfMeterMin {
    optional uint64 rtt_syn = 1;
    optional uint64 rtt_avg = 2;
}

message PerfMeter {
    optional PerfMeterSum sum = 1;
    optional PerfMeterMax max = 2;
    optional PerfMeterMin min = 3;
}

message PerfGeoMeter {
    optional PerfMeter meter = 1;
    optional uint64 sum_abnormal_flow_count = 2;
    optional uint64 sum_duration = 3;
    optional uint64 sum_closed_flow_count = 4;
}

message PerfVisitorMeter {
    optional PerfMeterSum meter_sum = 1;
    optional uint64 sum_abnormal_flow_count = 2;
    optional uint64 sum_duration = 3;
    optional uint64 sum_closed_flow_count = 4;
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfi.proto

package pbdfi // import "gitlab.x.lan/yunshan/message/pbdfi"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestType int32

const (
	RequestType_FLOW_HEADER     RequestType = 1
	RequestType_OVS_TOPOLOGY    RequestType = 2
	RequestType_PACKET_HEADER   RequestType = 3
	RequestType_METERING_HEADER RequestType = 4
)

var RequestType_name = map[int32]string{
	1: "FLOW_HEADER",
	2: "OVS_TOPOLOGY",
	3: "PACKET_HEADER",
	4: "METERING_HEADER",
}
var RequestType_value = map[string]int32{
	"FLOW_HEADER":     1,
	"OVS_TOPOLOGY":    2,
	"PACKET_HEADER":   3,
	"METERING_HEADER": 4,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}
func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{0}
}

type Direction int32

const (
	Direction_FORWARD Direction = 0
	Direction_REVERSE Direction = 1
)

var Direction_name = map[int32]string{
	0: "FORWARD",
	1: "REVERSE",
}
var Direction_value = map[string]int32{
	"FORWARD": 0,
	"REVERSE": 1,
}

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}
func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}
func (x *Direction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Direction_value, data, "Direction")
	if err != nil {
		return err
	}
	*x = Direction(value)
	return nil
}
func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{1}
}

type FlowHeader struct {
	Sequence             *uint64  `protobuf:"fixed64,1,req,name=sequence" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowHeader) Reset()         { *m = FlowHeader{} }
func (m *FlowHeader) String() string { return proto.CompactTextString(m) }
func (*FlowHeader) ProtoMessage()    {}
func (*FlowHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{0}
}
func (m *FlowHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowHeader.Unmarshal(m, b)
}
func (m *FlowHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowHeader.Marshal(b, m, deterministic)
}
func (dst *FlowHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowHeader.Merge(dst, src)
}
func (m *FlowHeader) XXX_Size() int {
	return xxx_messageInfo_FlowHeader.Size(m)
}
func (m *FlowHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowHeader.DiscardUnknown(m)
}

var xxx_messageInfo_FlowHeader proto.InternalMessageInfo

func (m *FlowHeader) GetSequence() uint64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

type OvsPort struct {
	Mac                  *string  `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	DpPort               *uint32  `protobuf:"varint,2,opt,name=dp_port" json:"dp_port,omitempty"`
	InterfaceName        *string  `protobuf:"bytes,3,opt,name=interface_name" json:"interface_name,omitempty"`
	BridgeName           *string  `protobuf:"bytes,4,opt,name=bridge_name" json:"bridge_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OvsPort) Reset()         { *m = OvsPort{} }
func (m *OvsPort) String() string { return proto.CompactTextString(m) }
func (*OvsPort) ProtoMessage()    {}
func (*OvsPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{1}
}
func (m *OvsPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OvsPort.Unmarshal(m, b)
}
func (m *OvsPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OvsPort.Marshal(b, m, deterministic)
}
func (dst *OvsPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OvsPort.Merge(dst, src)
}
func (m *OvsPort) XXX_Size() int {
	return xxx_messageInfo_OvsPort.Size(m)
}
func (m *OvsPort) XXX_DiscardUnknown() {
	xxx_messageInfo_OvsPort.DiscardUnknown(m)
}

var xxx_messageInfo_OvsPort proto.InternalMessageInfo

func (m *OvsPort) GetMac() string {
	if m != nil && m.Mac != nil {
		return *m.Mac
	}
	return ""
}

func (m *OvsPort) GetDpPort() uint32 {
	if m != nil && m.DpPort != nil {
		return *m.DpPort
	}
	return 0
}

func (m *OvsPort) GetInterfaceName() string {
	if m != nil && m.InterfaceName != nil {
		return *m.InterfaceName
	}
	return ""
}

func (m *OvsPort) GetBridgeName() string {
	if m != nil && m.BridgeName != nil {
		return *m.BridgeName
	}
	return ""
}

type OvsTopology struct {
	Ports                []*OvsPort `protobuf:"bytes,1,rep,name=ports" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OvsTopology) Reset()         { *m = OvsTopology{} }
func (m *OvsTopology) String() string { return proto.CompactTextString(m) }
func (*OvsTopology) ProtoMessage()    {}
func (*OvsTopology) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{2}
}
func (m *OvsTopology) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OvsTopology.Unmarshal(m, b)
}
func (m *OvsTopology) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OvsTopology.Marshal(b, m, deterministic)
}
func (dst *OvsTopology) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OvsTopology.Merge(dst, src)
}
func (m *OvsTopology) XXX_Size() int {
	return xxx_messageInfo_OvsTopology.Size(m)
}
func (m *OvsTopology) XXX_DiscardUnknown() {
	xxx_messageInfo_OvsTopology.DiscardUnknown(m)
}

var xxx_messageInfo_OvsTopology proto.InternalMessageInfo

func (m *OvsTopology) GetPorts() []*OvsPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type Request struct {
	Type                 *RequestType `protobuf:"varint,1,opt,name=type,enum=DFI.RequestType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetType() RequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RequestType_FLOW_HEADER
}

//
// Evaluated in host byte order.
// If the value is the same as the default value, then the corresponding key
// is unnecessary to be evaluated, in other words, has_xxx = 0
type Flow struct {
	Exporter  *uint32 `protobuf:"varint,2,opt,name=exporter" json:"exporter,omitempty"`
	CloseType *uint32 `protobuf:"varint,7,opt,name=close_type" json:"close_type,omitempty"`
	FlowId    *uint64 `protobuf:"varint,8,opt,name=flow_id" json:"flow_id,omitempty"`
	StartTime *uint32 `protobuf:"varint,11,opt,name=start_time" json:"start_time,omitempty"`
	EndTime   *uint32 `protobuf:"varint,12,opt,name=end_time" json:"end_time,omitempty"`
	Duration  *uint64 `protobuf:"varint,13,opt,name=duration" json:"duration,omitempty"`
	// L1
	InPort_0 *uint32 `protobuf:"varint,21,opt,name=in_port_0,def=0" json:"in_port_0,omitempty"`
	// L2
	Vlan    *uint32 `protobuf:"varint,31,opt,name=vlan,def=0" json:"vlan,omitempty"`
	EthType *uint32 `protobuf:"varint,32,opt,name=eth_type,def=0" json:"eth_type,omitempty"`
	MacSrc  *uint64 `protobuf:"varint,33,opt,name=mac_src,def=0" json:"mac_src,omitempty"`
	MacDst  *uint64 `protobuf:"varint,34,opt,name=mac_dst,def=0" json:"mac_dst,omitempty"`
	// L3
	IpSrc *uint32 `protobuf:"varint,41,opt,name=ip_src" json:"ip_src,omitempty"`
	IpDst *uint32 `protobuf:"varint,42,opt,name=ip_dst" json:"ip_dst,omitempty"`
	// L4
	Proto      *uint32 `protobuf:"varint,51,opt,name=proto,def=0" json:"proto,omitempty"`
	PortSrc    *uint32 `protobuf:"varint,52,opt,name=port_src" json:"port_src,omitempty"`
	PortDst    *uint32 `protobuf:"varint,53,opt,name=port_dst" json:"port_dst,omitempty"`
	TcpFlags_0 *uint32 `protobuf:"varint,54,opt,name=tcp_flags_0,def=0" json:"tcp_flags_0,omitempty"`
	TcpFlags_1 *uint32 `protobuf:"varint,55,opt,name=tcp_flags_1,def=0" json:"tcp_flags_1,omitempty"`
	// Tunnel
	TunId    *uint64 `protobuf:"varint,61,opt,name=tun_id,def=0" json:"tun_id,omitempty"`
	TunIpSrc *uint32 `protobuf:"varint,62,opt,name=tun_ip_src,def=0" json:"tun_ip_src,omitempty"`
	TunIpDst *uint32 `protobuf:"varint,63,opt,name=tun_ip_dst,def=0" json:"tun_ip_dst,omitempty"`
	TunType  *uint64 `protobuf:"varint,64,opt,name=tun_type,def=0" json:"tun_type,omitempty"`
	// Packet Counters
	ByteCnt_0      *uint64 `protobuf:"varint,71,opt,name=byte_cnt_0,def=0" json:"byte_cnt_0,omitempty"`
	ByteCnt_1      *uint64 `protobuf:"varint,72,opt,name=byte_cnt_1,def=0" json:"byte_cnt_1,omitempty"`
	PktCnt_0       *uint64 `protobuf:"varint,73,opt,name=pkt_cnt_0,def=0" json:"pkt_cnt_0,omitempty"`
	PktCnt_1       *uint64 `protobuf:"varint,74,opt,name=pkt_cnt_1,def=0" json:"pkt_cnt_1,omitempty"`
	TotalByteCnt_0 *uint64 `protobuf:"varint,75,opt,name=total_byte_cnt_0,def=0" json:"total_byte_cnt_0,omitempty"`
	TotalByteCnt_1 *uint64 `protobuf:"varint,76,opt,name=total_byte_cnt_1,def=0" json:"total_byte_cnt_1,omitempty"`
	TotalPktCnt_0  *uint64 `protobuf:"varint,77,opt,name=total_pkt_cnt_0,def=0" json:"total_pkt_cnt_0,omitempty"`
	TotalPktCnt_1  *uint64 `protobuf:"varint,78,opt,name=total_pkt_cnt_1,def=0" json:"total_pkt_cnt_1,omitempty"`
	// Platform Data
	SubnetId_0         *uint32  `protobuf:"varint,100,opt,name=subnet_id_0,def=0" json:"subnet_id_0,omitempty"`
	SubnetId_1         *uint32  `protobuf:"varint,101,opt,name=subnet_id_1,def=0" json:"subnet_id_1,omitempty"`
	L3DeviceType_0     *uint32  `protobuf:"varint,102,opt,name=l3_device_type_0,def=0" json:"l3_device_type_0,omitempty"`
	L3DeviceType_1     *uint32  `protobuf:"varint,103,opt,name=l3_device_type_1,def=0" json:"l3_device_type_1,omitempty"`
	L3DeviceId_0       *uint32  `protobuf:"varint,104,opt,name=l3_device_id_0,def=0" json:"l3_device_id_0,omitempty"`
	L3DeviceId_1       *uint32  `protobuf:"varint,105,opt,name=l3_device_id_1,def=0" json:"l3_device_id_1,omitempty"`
	L3EpcId_0          *uint32  `protobuf:"varint,106,opt,name=l3_epc_id_0,def=0" json:"l3_epc_id_0,omitempty"`
	L3EpcId_1          *uint32  `protobuf:"varint,107,opt,name=l3_epc_id_1,def=0" json:"l3_epc_id_1,omitempty"`
	Host_0             *uint32  `protobuf:"varint,108,opt,name=host_0" json:"host_0,omitempty"`
	Host_1             *uint32  `protobuf:"varint,109,opt,name=host_1" json:"host_1,omitempty"`
	EpcId_0            *uint32  `protobuf:"varint,120,opt,name=epc_id_0,def=0" json:"epc_id_0,omitempty"`
	EpcId_1            *uint32  `protobuf:"varint,121,opt,name=epc_id_1,def=0" json:"epc_id_1,omitempty"`
	DeviceType_0       *uint32  `protobuf:"varint,122,opt,name=device_type_0,def=0" json:"device_type_0,omitempty"`
	DeviceType_1       *uint32  `protobuf:"varint,123,opt,name=device_type_1,def=0" json:"device_type_1,omitempty"`
	DeviceId_0         *uint32  `protobuf:"varint,124,opt,name=device_id_0,def=0" json:"device_id_0,omitempty"`
	DeviceId_1         *uint32  `protobuf:"varint,125,opt,name=device_id_1,def=0" json:"device_id_1,omitempty"`
	IfType_0           *uint32  `protobuf:"varint,128,opt,name=if_type_0,def=0" json:"if_type_0,omitempty"`
	IfType_1           *uint32  `protobuf:"varint,129,opt,name=if_type_1,def=0" json:"if_type_1,omitempty"`
	IsL2End_0          *bool    `protobuf:"varint,130,opt,name=is_l2_end_0,def=0" json:"is_l2_end_0,omitempty"`
	IsL2End_1          *bool    `protobuf:"varint,131,opt,name=is_l2_end_1,def=0" json:"is_l2_end_1,omitempty"`
	IsL3End_0          *bool    `protobuf:"varint,132,opt,name=is_l3_end_0,def=0" json:"is_l3_end_0,omitempty"`
	IsL3End_1          *bool    `protobuf:"varint,133,opt,name=is_l3_end_1,def=0" json:"is_l3_end_1,omitempty"`
	GroupIds_0         []uint32 `protobuf:"varint,134,rep,name=group_ids_0" json:"group_ids_0,omitempty"`
	GroupIds_1         []uint32 `protobuf:"varint,135,rep,name=group_ids_1" json:"group_ids_1,omitempty"`
	WhitelistRuleIds_0 []uint32 `protobuf:"varint,136,rep,name=whitelist_rule_ids_0" json:"whitelist_rule_ids_0,omitempty"`
	WhitelistRuleIds_1 []uint32 `protobuf:"varint,137,rep,name=whitelist_rule_ids_1" json:"whitelist_rule_ids_1,omitempty"`
	CustomTagIds_0     []uint32 `protobuf:"varint,138,rep,name=custom_tag_ids_0" json:"custom_tag_ids_0,omitempty"`
	CustomTagIds_1     []uint32 `protobuf:"varint,139,rep,name=custom_tag_ids_1" json:"custom_tag_ids_1,omitempty"`
	// TCP Perf Data
	RttSyn               *uint64  `protobuf:"varint,140,opt,name=rtt_syn,def=0" json:"rtt_syn,omitempty"`
	Rtt                  *uint64  `protobuf:"varint,141,opt,name=rtt,def=0" json:"rtt,omitempty"`
	RttAvg               *uint64  `protobuf:"varint,142,opt,name=rtt_avg,def=0" json:"rtt_avg,omitempty"`
	SynRetransCnt_0      *uint64  `protobuf:"varint,143,opt,name=syn_retrans_cnt_0,def=0" json:"syn_retrans_cnt_0,omitempty"`
	SynRetransCnt_1      *uint64  `protobuf:"varint,144,opt,name=syn_retrans_cnt_1,def=0" json:"syn_retrans_cnt_1,omitempty"`
	RetransCnt_0         *uint64  `protobuf:"varint,145,opt,name=retrans_cnt_0,def=0" json:"retrans_cnt_0,omitempty"`
	RetransCnt_1         *uint64  `protobuf:"varint,146,opt,name=retrans_cnt_1,def=0" json:"retrans_cnt_1,omitempty"`
	TotalRetransCnt      *uint64  `protobuf:"varint,147,opt,name=total_retrans_cnt,def=0" json:"total_retrans_cnt,omitempty"`
	ZeroWndCnt_0         *uint64  `protobuf:"varint,148,opt,name=zero_wnd_cnt_0,def=0" json:"zero_wnd_cnt_0,omitempty"`
	ZeroWndCnt_1         *uint64  `protobuf:"varint,149,opt,name=zero_wnd_cnt_1,def=0" json:"zero_wnd_cnt_1,omitempty"`
	PshUrgCnt_0          *uint64  `protobuf:"varint,154,opt,name=psh_urg_cnt_0,def=0" json:"psh_urg_cnt_0,omitempty"`
	PshUrgCnt_1          *uint64  `protobuf:"varint,155,opt,name=psh_urg_cnt_1,def=0" json:"psh_urg_cnt_1,omitempty"`
	ArtAvg               *uint64  `protobuf:"varint,157,opt,name=art_avg,def=0" json:"art_avg,omitempty"`
	AvgPktInterval       *uint64  `protobuf:"varint,160,opt,name=avg_pkt_interval,def=0" json:"avg_pkt_interval,omitempty"`
	PktIntervalVariance  *uint64  `protobuf:"varint,161,opt,name=pkt_interval_variance,def=0" json:"pkt_interval_variance,omitempty"`
	PktSizeVariance      *uint64  `protobuf:"varint,162,opt,name=pkt_size_variance,def=0" json:"pkt_size_variance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Flow) Reset()         { *m = Flow{} }
func (m *Flow) String() string { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()    {}
func (*Flow) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{4}
}
func (m *Flow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flow.Unmarshal(m, b)
}
func (m *Flow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flow.Marshal(b, m, deterministic)
}
func (dst *Flow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flow.Merge(dst, src)
}
func (m *Flow) XXX_Size() int {
	return xxx_messageInfo_Flow.Size(m)
}
func (m *Flow) XXX_DiscardUnknown() {
	xxx_messageInfo_Flow.DiscardUnknown(m)
}

var xxx_messageInfo_Flow proto.InternalMessageInfo

const Default_Flow_InPort_0 uint32 = 0
const Default_Flow_Vlan uint32 = 0
const Default_Flow_EthType uint32 = 0
const Default_Flow_MacSrc uint64 = 0
const Default_Flow_MacDst uint64 = 0
const Default_Flow_Proto uint32 = 0
const Default_Flow_TcpFlags_0 uint32 = 0
const Default_Flow_TcpFlags_1 uint32 = 0
const Default_Flow_TunId uint64 = 0
const Default_Flow_TunIpSrc uint32 = 0
const Default_Flow_TunIpDst uint32 = 0
const Default_Flow_TunType uint64 = 0
const Default_Flow_ByteCnt_0 uint64 = 0
const Default_Flow_ByteCnt_1 uint64 = 0
const Default_Flow_PktCnt_0 uint64 = 0
const Default_Flow_PktCnt_1 uint64 = 0
const Default_Flow_TotalByteCnt_0 uint64 = 0
const Default_Flow_TotalByteCnt_1 uint64 = 0
const Default_Flow_TotalPktCnt_0 uint64 = 0
const Default_Flow_TotalPktCnt_1 uint64 = 0
const Default_Flow_SubnetId_0 uint32 = 0
const Default_Flow_SubnetId_1 uint32 = 0
const Default_Flow_L3DeviceType_0 uint32 = 0
const Default_Flow_L3DeviceType_1 uint32 = 0
const Default_Flow_L3DeviceId_0 uint32 = 0
const Default_Flow_L3DeviceId_1 uint32 = 0
const Default_Flow_L3EpcId_0 uint32 = 0
const Default_Flow_L3EpcId_1 uint32 = 0
const Default_Flow_EpcId_0 uint32 = 0
const Default_Flow_EpcId_1 uint32 = 0
const Default_Flow_DeviceType_0 uint32 = 0
const Default_Flow_DeviceType_1 uint32 = 0
const Default_Flow_DeviceId_0 uint32 = 0
const Default_Flow_DeviceId_1 uint32 = 0
const Default_Flow_IfType_0 uint32 = 0
const Default_Flow_IfType_1 uint32 = 0
const Default_Flow_IsL2End_0 bool = false
const Default_Flow_IsL2End_1 bool = false
const Default_Flow_IsL3End_0 bool = false
const Default_Flow_IsL3End_1 bool = false
const Default_Flow_RttSyn uint64 = 0
const Default_Flow_Rtt uint64 = 0
const Default_Flow_RttAvg uint64 = 0
const Default_Flow_SynRetransCnt_0 uint64 = 0
const Default_Flow_SynRetransCnt_1 uint64 = 0
const Default_Flow_RetransCnt_0 uint64 = 0
const Default_Flow_RetransCnt_1 uint64 = 0
const Default_Flow_TotalRetransCnt uint64 = 0
const Default_Flow_ZeroWndCnt_0 uint64 = 0
const Default_Flow_ZeroWndCnt_1 uint64 = 0
const Default_Flow_PshUrgCnt_0 uint64 = 0
const Default_Flow_PshUrgCnt_1 uint64 = 0
const Default_Flow_ArtAvg uint64 = 0
const Default_Flow_AvgPktInterval uint64 = 0
const Default_Flow_PktIntervalVariance uint64 = 0
const Default_Flow_PktSizeVariance uint64 = 0

func (m *Flow) GetExporter() uint32 {
	if m != nil && m.Exporter != nil {
		return *m.Exporter
	}
	return 0
}

func (m *Flow) GetCloseType() uint32 {
	if m != nil && m.CloseType != nil {
		return *m.CloseType
	}
	return 0
}

func (m *Flow) GetFlowId() uint64 {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return 0
}

func (m *Flow) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *Flow) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

func (m *Flow) GetDuration() uint64 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

func (m *Flow) GetInPort_0() uint32 {
	if m != nil && m.InPort_0 != nil {
		return *m.InPort_0
	}
	return Default_Flow_InPort_0
}

func (m *Flow) GetVlan() uint32 {
	if m != nil && m.Vlan != nil {
		return *m.Vlan
	}
	return Default_Flow_Vlan
}

func (m *Flow) GetEthType() uint32 {
	if m != nil && m.EthType != nil {
		return *m.EthType
	}
	return Default_Flow_EthType
}

func (m *Flow) GetMacSrc() uint64 {
	if m != nil && m.MacSrc != nil {
		return *m.MacSrc
	}
	return Default_Flow_MacSrc
}

func (m *Flow) GetMacDst() uint64 {
	if m != nil && m.MacDst != nil {
		return *m.MacDst
	}
	return Default_Flow_MacDst
}

func (m *Flow) GetIpSrc() uint32 {
	if m != nil && m.IpSrc != nil {
		return *m.IpSrc
	}
	return 0
}

func (m *Flow) GetIpDst() uint32 {
	if m != nil && m.IpDst != nil {
		return *m.IpDst
	}
	return 0
}

func (m *Flow) GetProto() uint32 {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return Default_Flow_Proto
}

func (m *Flow) GetPortSrc() uint32 {
	if m != nil && m.PortSrc != nil {
		return *m.PortSrc
	}
	return 0
}

func (m *Flow) GetPortDst() uint32 {
	if m != nil && m.PortDst != nil {
		return *m.PortDst
	}
	return 0
}

func (m *Flow) GetTcpFlags_0() uint32 {
	if m != nil && m.TcpFlags_0 != nil {
		return *m.TcpFlags_0
	}
	return Default_Flow_TcpFlags_0
}

func (m *Flow) GetTcpFlags_1() uint32 {
	if m != nil && m.TcpFlags_1 != nil {
		return *m.TcpFlags_1
	}
	return Default_Flow_TcpFlags_1
}

func (m *Flow) GetTunId() uint64 {
	if m != nil && m.TunId != nil {
		return *m.TunId
	}
	return Default_Flow_TunId
}

func (m *Flow) GetTunIpSrc() uint32 {
	if m != nil && m.TunIpSrc != nil {
		return *m.TunIpSrc
	}
	return Default_Flow_TunIpSrc
}

func (m *Flow) GetTunIpDst() uint32 {
	if m != nil && m.TunIpDst != nil {
		return *m.TunIpDst
	}
	return Default_Flow_TunIpDst
}

func (m *Flow) GetTunType() uint64 {
	if m != nil && m.TunType != nil {
		return *m.TunType
	}
	return Default_Flow_TunType
}

func (m *Flow) GetByteCnt_0() uint64 {
	if m != nil && m.ByteCnt_0 != nil {
		return *m.ByteCnt_0
	}
	return Default_Flow_ByteCnt_0
}

func (m *Flow) GetByteCnt_1() uint64 {
	if m != nil && m.ByteCnt_1 != nil {
		return *m.ByteCnt_1
	}
	return Default_Flow_ByteCnt_1
}

func (m *Flow) GetPktCnt_0() uint64 {
	if m != nil && m.PktCnt_0 != nil {
		return *m.PktCnt_0
	}
	return Default_Flow_PktCnt_0
}

func (m *Flow) GetPktCnt_1() uint64 {
	if m != nil && m.PktCnt_1 != nil {
		return *m.PktCnt_1
	}
	return Default_Flow_PktCnt_1
}

func (m *Flow) GetTotalByteCnt_0() uint64 {
	if m != nil && m.TotalByteCnt_0 != nil {
		return *m.TotalByteCnt_0
	}
	return Default_Flow_TotalByteCnt_0
}

func (m *Flow) GetTotalByteCnt_1() uint64 {
	if m != nil && m.TotalByteCnt_1 != nil {
		return *m.TotalByteCnt_1
	}
	return Default_Flow_TotalByteCnt_1
}

func (m *Flow) GetTotalPktCnt_0() uint64 {
	if m != nil && m.TotalPktCnt_0 != nil {
		return *m.TotalPktCnt_0
	}
	return Default_Flow_TotalPktCnt_0
}

func (m *Flow) GetTotalPktCnt_1() uint64 {
	if m != nil && m.TotalPktCnt_1 != nil {
		return *m.TotalPktCnt_1
	}
	return Default_Flow_TotalPktCnt_1
}

func (m *Flow) GetSubnetId_0() uint32 {
	if m != nil && m.SubnetId_0 != nil {
		return *m.SubnetId_0
	}
	return Default_Flow_SubnetId_0
}

func (m *Flow) GetSubnetId_1() uint32 {
	if m != nil && m.SubnetId_1 != nil {
		return *m.SubnetId_1
	}
	return Default_Flow_SubnetId_1
}

func (m *Flow) GetL3DeviceType_0() uint32 {
	if m != nil && m.L3DeviceType_0 != nil {
		return *m.L3DeviceType_0
	}
	return Default_Flow_L3DeviceType_0
}

func (m *Flow) GetL3DeviceType_1() uint32 {
	if m != nil && m.L3DeviceType_1 != nil {
		return *m.L3DeviceType_1
	}
	return Default_Flow_L3DeviceType_1
}

func (m *Flow) GetL3DeviceId_0() uint32 {
	if m != nil && m.L3DeviceId_0 != nil {
		return *m.L3DeviceId_0
	}
	return Default_Flow_L3DeviceId_0
}

func (m *Flow) GetL3DeviceId_1() uint32 {
	if m != nil && m.L3DeviceId_1 != nil {
		return *m.L3DeviceId_1
	}
	return Default_Flow_L3DeviceId_1
}

func (m *Flow) GetL3EpcId_0() uint32 {
	if m != nil && m.L3EpcId_0 != nil {
		return *m.L3EpcId_0
	}
	return Default_Flow_L3EpcId_0
}

func (m *Flow) GetL3EpcId_1() uint32 {
	if m != nil && m.L3EpcId_1 != nil {
		return *m.L3EpcId_1
	}
	return Default_Flow_L3EpcId_1
}

func (m *Flow) GetHost_0() uint32 {
	if m != nil && m.Host_0 != nil {
		return *m.Host_0
	}
	return 0
}

func (m *Flow) GetHost_1() uint32 {
	if m != nil && m.Host_1 != nil {
		return *m.Host_1
	}
	return 0
}

func (m *Flow) GetEpcId_0() uint32 {
	if m != nil && m.EpcId_0 != nil {
		return *m.EpcId_0
	}
	return Default_Flow_EpcId_0
}

func (m *Flow) GetEpcId_1() uint32 {
	if m != nil && m.EpcId_1 != nil {
		return *m.EpcId_1
	}
	return Default_Flow_EpcId_1
}

func (m *Flow) GetDeviceType_0() uint32 {
	if m != nil && m.DeviceType_0 != nil {
		return *m.DeviceType_0
	}
	return Default_Flow_DeviceType_0
}

func (m *Flow) GetDeviceType_1() uint32 {
	if m != nil && m.DeviceType_1 != nil {
		return *m.DeviceType_1
	}
	return Default_Flow_DeviceType_1
}

func (m *Flow) GetDeviceId_0() uint32 {
	if m != nil && m.DeviceId_0 != nil {
		return *m.DeviceId_0
	}
	return Default_Flow_DeviceId_0
}

func (m *Flow) GetDeviceId_1() uint32 {
	if m != nil && m.DeviceId_1 != nil {
		return *m.DeviceId_1
	}
	return Default_Flow_DeviceId_1
}

func (m *Flow) GetIfType_0() uint32 {
	if m != nil && m.IfType_0 != nil {
		return *m.IfType_0
	}
	return Default_Flow_IfType_0
}

func (m *Flow) GetIfType_1() uint32 {
	if m != nil && m.IfType_1 != nil {
		return *m.IfType_1
	}
	return Default_Flow_IfType_1
}

func (m *Flow) GetIsL2End_0() bool {
	if m != nil && m.IsL2End_0 != nil {
		return *m.IsL2End_0
	}
	return Default_Flow_IsL2End_0
}

func (m *Flow) GetIsL2End_1() bool {
	if m != nil && m.IsL2End_1 != nil {
		return *m.IsL2End_1
	}
	return Default_Flow_IsL2End_1
}

func (m *Flow) GetIsL3End_0() bool {
	if m != nil && m.IsL3End_0 != nil {
		return *m.IsL3End_0
	}
	return Default_Flow_IsL3End_0
}

func (m *Flow) GetIsL3End_1() bool {
	if m != nil && m.IsL3End_1 != nil {
		return *m.IsL3End_1
	}
	return Default_Flow_IsL3End_1
}

func (m *Flow) GetGroupIds_0() []uint32 {
	if m != nil {
		return m.GroupIds_0
	}
	return nil
}

func (m *Flow) GetGroupIds_1() []uint32 {
	if m != nil {
		return m.GroupIds_1
	}
	return nil
}

func (m *Flow) GetWhitelistRuleIds_0() []uint32 {
	if m != nil {
		return m.WhitelistRuleIds_0
	}
	return nil
}

func (m *Flow) GetWhitelistRuleIds_1() []uint32 {
	if m != nil {
		return m.WhitelistRuleIds_1
	}
	return nil
}

func (m *Flow) GetCustomTagIds_0() []uint32 {
	if m != nil {
		return m.CustomTagIds_0
	}
	return nil
}

func (m *Flow) GetCustomTagIds_1() []uint32 {
	if m != nil {
		return m.CustomTagIds_1
	}
	return nil
}

func (m *Flow) GetRttSyn() uint64 {
	if m != nil && m.RttSyn != nil {
		return *m.RttSyn
	}
	return Default_Flow_RttSyn
}

func (m *Flow) GetRtt() uint64 {
	if m != nil && m.Rtt != nil {
		return *m.Rtt
	}
	return Default_Flow_Rtt
}

func (m *Flow) GetRttAvg() uint64 {
	if m != nil && m.RttAvg != nil {
		return *m.RttAvg
	}
	return Default_Flow_RttAvg
}

func (m *Flow) GetSynRetransCnt_0() uint64 {
	if m != nil && m.SynRetransCnt_0 != nil {
		return *m.SynRetransCnt_0
	}
	return Default_Flow_SynRetransCnt_0
}

func (m *Flow) GetSynRetransCnt_1() uint64 {
	if m != nil && m.SynRetransCnt_1 != nil {
		return *m.SynRetransCnt_1
	}
	return Default_Flow_SynRetransCnt_1
}

func (m *Flow) GetRetransCnt_0() uint64 {
	if m != nil && m.RetransCnt_0 != nil {
		return *m.RetransCnt_0
	}
	return Default_Flow_RetransCnt_0
}

func (m *Flow) GetRetransCnt_1() uint64 {
	if m != nil && m.RetransCnt_1 != nil {
		return *m.RetransCnt_1
	}
	return Default_Flow_RetransCnt_1
}

func (m *Flow) GetTotalRetransCnt() uint64 {
	if m != nil && m.TotalRetransCnt != nil {
		return *m.TotalRetransCnt
	}
	return Default_Flow_TotalRetransCnt
}

func (m *Flow) GetZeroWndCnt_0() uint64 {
	if m != nil && m.ZeroWndCnt_0 != nil {
		return *m.ZeroWndCnt_0
	}
	return Default_Flow_ZeroWndCnt_0
}

func (m *Flow) GetZeroWndCnt_1() uint64 {
	if m != nil && m.ZeroWndCnt_1 != nil {
		return *m.ZeroWndCnt_1
	}
	return Default_Flow_ZeroWndCnt_1
}

func (m *Flow) GetPshUrgCnt_0() uint64 {
	if m != nil && m.PshUrgCnt_0 != nil {
		return *m.PshUrgCnt_0
	}
	return Default_Flow_PshUrgCnt_0
}

func (m *Flow) GetPshUrgCnt_1() uint64 {
	if m != nil && m.PshUrgCnt_1 != nil {
		return *m.PshUrgCnt_1
	}
	return Default_Flow_PshUrgCnt_1
}

func (m *Flow) GetArtAvg() uint64 {
	if m != nil && m.ArtAvg != nil {
		return *m.ArtAvg
	}
	return Default_Flow_ArtAvg
}

func (m *Flow) GetAvgPktInterval() uint64 {
	if m != nil && m.AvgPktInterval != nil {
		return *m.AvgPktInterval
	}
	return Default_Flow_AvgPktInterval
}

func (m *Flow) GetPktIntervalVariance() uint64 {
	if m != nil && m.PktIntervalVariance != nil {
		return *m.PktIntervalVariance
	}
	return Default_Flow_PktIntervalVariance
}

func (m *Flow) GetPktSizeVariance() uint64 {
	if m != nil && m.PktSizeVariance != nil {
		return *m.PktSizeVariance
	}
	return Default_Flow_PktSizeVariance
}

type Metering struct {
	Exporter  *uint32 `protobuf:"varint,1,opt,name=exporter" json:"exporter,omitempty"`
	Timestamp *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	InPort_0  *uint32 `protobuf:"varint,3,opt,name=in_port_0,def=0" json:"in_port_0,omitempty"`
	Vlan      *uint32 `protobuf:"varint,11,opt,name=vlan,def=0" json:"vlan,omitempty"`
	IpSrc     *uint32 `protobuf:"varint,21,opt,name=ip_src,def=0" json:"ip_src,omitempty"`
	IpDst     *uint32 `protobuf:"varint,22,opt,name=ip_dst,def=0" json:"ip_dst,omitempty"`
	Proto     *uint32 `protobuf:"varint,31,opt,name=proto,def=0" json:"proto,omitempty"`
	PortSrc   *uint32 `protobuf:"varint,32,opt,name=port_src,def=0" json:"port_src,omitempty"`
	PortDst   *uint32 `protobuf:"varint,33,opt,name=port_dst,def=0" json:"port_dst,omitempty"`
	ByteCnt_0 *uint64 `protobuf:"varint,41,opt,name=byte_cnt_0,def=0" json:"byte_cnt_0,omitempty"`
	ByteCnt_1 *uint64 `protobuf:"varint,42,opt,name=byte_cnt_1,def=0" json:"byte_cnt_1,omitempty"`
	PktCnt_0  *uint64 `protobuf:"varint,43,opt,name=pkt_cnt_0,def=0" json:"pkt_cnt_0,omitempty"`
	PktCnt_1  *uint64 `protobuf:"varint,44,opt,name=pkt_cnt_1,def=0" json:"pkt_cnt_1,omitempty"`
	// Platform Data
	L3EpcId_0            *uint32  `protobuf:"varint,51,opt,name=l3_epc_id_0,def=0" json:"l3_epc_id_0,omitempty"`
	L3EpcId_1            *uint32  `protobuf:"varint,52,opt,name=l3_epc_id_1,def=0" json:"l3_epc_id_1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metering) Reset()         { *m = Metering{} }
func (m *Metering) String() string { return proto.CompactTextString(m) }
func (*Metering) ProtoMessage()    {}
func (*Metering) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{5}
}
func (m *Metering) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metering.Unmarshal(m, b)
}
func (m *Metering) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metering.Marshal(b, m, deterministic)
}
func (dst *Metering) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metering.Merge(dst, src)
}
func (m *Metering) XXX_Size() int {
	return xxx_messageInfo_Metering.Size(m)
}
func (m *Metering) XXX_DiscardUnknown() {
	xxx_messageInfo_Metering.DiscardUnknown(m)
}

var xxx_messageInfo_Metering proto.InternalMessageInfo

const Default_Metering_InPort_0 uint32 = 0
const Default_Metering_Vlan uint32 = 0
const Default_Metering_IpSrc uint32 = 0
const Default_Metering_IpDst uint32 = 0
const Default_Metering_Proto uint32 = 0
const Default_Metering_PortSrc uint32 = 0
const Default_Metering_PortDst uint32 = 0
const Default_Metering_ByteCnt_0 uint64 = 0
const Default_Metering_ByteCnt_1 uint64 = 0
const Default_Metering_PktCnt_0 uint64 = 0
const Default_Metering_PktCnt_1 uint64 = 0
const Default_Metering_L3EpcId_0 uint32 = 0
const Default_Metering_L3EpcId_1 uint32 = 0

func (m *Metering) GetExporter() uint32 {
	if m != nil && m.Exporter != nil {
		return *m.Exporter
	}
	return 0
}

func (m *Metering) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Metering) GetInPort_0() uint32 {
	if m != nil && m.InPort_0 != nil {
		return *m.InPort_0
	}
	return Default_Metering_InPort_0
}

func (m *Metering) GetVlan() uint32 {
	if m != nil && m.Vlan != nil {
		return *m.Vlan
	}
	return Default_Metering_Vlan
}

func (m *Metering) GetIpSrc() uint32 {
	if m != nil && m.IpSrc != nil {
		return *m.IpSrc
	}
	return Default_Metering_IpSrc
}

func (m *Metering) GetIpDst() uint32 {
	if m != nil && m.IpDst != nil {
		return *m.IpDst
	}
	return Default_Metering_IpDst
}

func (m *Metering) GetProto() uint32 {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return Default_Metering_Proto
}

func (m *Metering) GetPortSrc() uint32 {
	if m != nil && m.PortSrc != nil {
		return *m.PortSrc
	}
	return Default_Metering_PortSrc
}

func (m *Metering) GetPortDst() uint32 {
	if m != nil && m.PortDst != nil {
		return *m.PortDst
	}
	return Default_Metering_PortDst
}

func (m *Metering) GetByteCnt_0() uint64 {
	if m != nil && m.ByteCnt_0 != nil {
		return *m.ByteCnt_0
	}
	return Default_Metering_ByteCnt_0
}

func (m *Metering) GetByteCnt_1() uint64 {
	if m != nil && m.ByteCnt_1 != nil {
		return *m.ByteCnt_1
	}
	return Default_Metering_ByteCnt_1
}

func (m *Metering) GetPktCnt_0() uint64 {
	if m != nil && m.PktCnt_0 != nil {
		return *m.PktCnt_0
	}
	return Default_Metering_PktCnt_0
}

func (m *Metering) GetPktCnt_1() uint64 {
	if m != nil && m.PktCnt_1 != nil {
		return *m.PktCnt_1
	}
	return Default_Metering_PktCnt_1
}

func (m *Metering) GetL3EpcId_0() uint32 {
	if m != nil && m.L3EpcId_0 != nil {
		return *m.L3EpcId_0
	}
	return Default_Metering_L3EpcId_0
}

func (m *Metering) GetL3EpcId_1() uint32 {
	if m != nil && m.L3EpcId_1 != nil {
		return *m.L3EpcId_1
	}
	return Default_Metering_L3EpcId_1
}

// 注意：message中的tag不要大于31，大于31以后key会多占用1个字节。
//    1. 字段delta_key表示记录该key和前一个包的该key的值的差量
//       假定所有差量都可能为负数，使用sint，当差值为0时不用记录
//    2. 字段key为null（has_key=0）表示该key和前一个包的该key的值相同
//    3. 字段key不为null（has_key=1）表示记录原始值
//    4. 每条网流的首包要记录所有key和delta_key
type EthernetHeader struct {
	DestinationAddress   *uint64  `protobuf:"varint,1,opt,name=destination_address" json:"destination_address,omitempty"`
	SourceAddress        *uint64  `protobuf:"varint,2,opt,name=source_address" json:"source_address,omitempty"`
	EtherType            *uint32  `protobuf:"varint,3,opt,name=ether_type" json:"ether_type,omitempty"`
	VlanTag              *uint32  `protobuf:"varint,4,opt,name=vlan_tag" json:"vlan_tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthernetHeader) Reset()         { *m = EthernetHeader{} }
func (m *EthernetHeader) String() string { return proto.CompactTextString(m) }
func (*EthernetHeader) ProtoMessage()    {}
func (*EthernetHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{6}
}
func (m *EthernetHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EthernetHeader.Unmarshal(m, b)
}
func (m *EthernetHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EthernetHeader.Marshal(b, m, deterministic)
}
func (dst *EthernetHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthernetHeader.Merge(dst, src)
}
func (m *EthernetHeader) XXX_Size() int {
	return xxx_messageInfo_EthernetHeader.Size(m)
}
func (m *EthernetHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_EthernetHeader.DiscardUnknown(m)
}

var xxx_messageInfo_EthernetHeader proto.InternalMessageInfo

func (m *EthernetHeader) GetDestinationAddress() uint64 {
	if m != nil && m.DestinationAddress != nil {
		return *m.DestinationAddress
	}
	return 0
}

func (m *EthernetHeader) GetSourceAddress() uint64 {
	if m != nil && m.SourceAddress != nil {
		return *m.SourceAddress
	}
	return 0
}

func (m *EthernetHeader) GetEtherType() uint32 {
	if m != nil && m.EtherType != nil {
		return *m.EtherType
	}
	return 0
}

func (m *EthernetHeader) GetVlanTag() uint32 {
	if m != nil && m.VlanTag != nil {
		return *m.VlanTag
	}
	return 0
}

type Ipv4Header struct {
	Version             *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Ihl                 *uint32 `protobuf:"varint,2,opt,name=ihl" json:"ihl,omitempty"`
	Tos                 *uint32 `protobuf:"varint,3,opt,name=tos" json:"tos,omitempty"`
	TotalLength         *uint32 `protobuf:"varint,4,opt,name=total_length" json:"total_length,omitempty"`
	DeltaIdentification *int32  `protobuf:"zigzag32,5,opt,name=delta_identification" json:"delta_identification,omitempty"`
	// flags is combined into fragment offset
	DeltaFragmentOffset *int32  `protobuf:"zigzag32,6,opt,name=delta_fragment_offset" json:"delta_fragment_offset,omitempty"`
	Ttl                 *uint32 `protobuf:"varint,7,opt,name=ttl" json:"ttl,omitempty"`
	Protocol            *uint32 `protobuf:"varint,8,opt,name=protocol" json:"protocol,omitempty"`
	// ignore check_sum if it is correct
	HeaderChecksum *uint32 `protobuf:"varint,9,opt,name=header_checksum" json:"header_checksum,omitempty"`
	// IP address always has 4B, use fixed encoding
	SourceAddress      *uint32 `protobuf:"fixed32,10,opt,name=source_address" json:"source_address,omitempty"`
	DestinationAddress *uint32 `protobuf:"fixed32,11,opt,name=destination_address" json:"destination_address,omitempty"`
	// 5.0不考虑IP option的压缩，直接将byte数组放在此处即可
	// options基本由byte组成，从wiki来看也没有压缩空间：
	// https://en.wikipedia.org/wiki/IPv4
	Options              []byte   `protobuf:"bytes,12,opt,name=options" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv4Header) Reset()         { *m = Ipv4Header{} }
func (m *Ipv4Header) String() string { return proto.CompactTextString(m) }
func (*Ipv4Header) ProtoMessage()    {}
func (*Ipv4Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{7}
}
func (m *Ipv4Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv4Header.Unmarshal(m, b)
}
func (m *Ipv4Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv4Header.Marshal(b, m, deterministic)
}
func (dst *Ipv4Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv4Header.Merge(dst, src)
}
func (m *Ipv4Header) XXX_Size() int {
	return xxx_messageInfo_Ipv4Header.Size(m)
}
func (m *Ipv4Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv4Header.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv4Header proto.InternalMessageInfo

func (m *Ipv4Header) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Ipv4Header) GetIhl() uint32 {
	if m != nil && m.Ihl != nil {
		return *m.Ihl
	}
	return 0
}

func (m *Ipv4Header) GetTos() uint32 {
	if m != nil && m.Tos != nil {
		return *m.Tos
	}
	return 0
}

func (m *Ipv4Header) GetTotalLength() uint32 {
	if m != nil && m.TotalLength != nil {
		return *m.TotalLength
	}
	return 0
}

func (m *Ipv4Header) GetDeltaIdentification() int32 {
	if m != nil && m.DeltaIdentification != nil {
		return *m.DeltaIdentification
	}
	return 0
}

func (m *Ipv4Header) GetDeltaFragmentOffset() int32 {
	if m != nil && m.DeltaFragmentOffset != nil {
		return *m.DeltaFragmentOffset
	}
	return 0
}

func (m *Ipv4Header) GetTtl() uint32 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return 0
}

func (m *Ipv4Header) GetProtocol() uint32 {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return 0
}

func (m *Ipv4Header) GetHeaderChecksum() uint32 {
	if m != nil && m.HeaderChecksum != nil {
		return *m.HeaderChecksum
	}
	return 0
}

func (m *Ipv4Header) GetSourceAddress() uint32 {
	if m != nil && m.SourceAddress != nil {
		return *m.SourceAddress
	}
	return 0
}

func (m *Ipv4Header) GetDestinationAddress() uint32 {
	if m != nil && m.DestinationAddress != nil {
		return *m.DestinationAddress
	}
	return 0
}

func (m *Ipv4Header) GetOptions() []byte {
	if m != nil {
		return m.Options
	}
	return nil
}

type TcpHeader struct {
	SourcePort                 *uint32 `protobuf:"varint,1,opt,name=source_port" json:"source_port,omitempty"`
	DestinationPort            *uint32 `protobuf:"varint,2,opt,name=destination_port" json:"destination_port,omitempty"`
	DeltaSequenceNumber        *int64  `protobuf:"zigzag64,3,opt,name=delta_sequence_number" json:"delta_sequence_number,omitempty"`
	DeltaAcknowledgementNumber *int64  `protobuf:"zigzag64,4,opt,name=delta_acknowledgement_number" json:"delta_acknowledgement_number,omitempty"`
	DataOffset                 *uint32 `protobuf:"varint,5,opt,name=data_offset" json:"data_offset,omitempty"`
	Reserved                   *uint32 `protobuf:"varint,6,opt,name=reserved" json:"reserved,omitempty"`
	Flags                      *uint32 `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	DeltaWindow                *int32  `protobuf:"zigzag32,8,opt,name=delta_window" json:"delta_window,omitempty"`
	// checksum is ignored here                             2 B
	UrgentPointer *uint32 `protobuf:"varint,9,opt,name=urgent_pointer" json:"urgent_pointer,omitempty"`
	// TCP option很常见的，由byte、u16、u32组成，且存在很多不确定性
	// 5.0考虑将TCP options分割成10个4字节word，仅记录差量
	// https://en.wikipedia.org/wiki/Transmission_Control_Protocol
	DeltaOption_0W       *int64   `protobuf:"zigzag64,10,opt,name=delta_option_0w" json:"delta_option_0w,omitempty"`
	DeltaOption_1W       *int64   `protobuf:"zigzag64,11,opt,name=delta_option_1w" json:"delta_option_1w,omitempty"`
	DeltaOption_2W       *int64   `protobuf:"zigzag64,12,opt,name=delta_option_2w" json:"delta_option_2w,omitempty"`
	DeltaOption_3W       *int64   `protobuf:"zigzag64,13,opt,name=delta_option_3w" json:"delta_option_3w,omitempty"`
	DeltaOption_4W       *int64   `protobuf:"zigzag64,14,opt,name=delta_option_4w" json:"delta_option_4w,omitempty"`
	DeltaOption_5W       *int64   `protobuf:"zigzag64,15,opt,name=delta_option_5w" json:"delta_option_5w,omitempty"`
	DeltaOption_6W       *int64   `protobuf:"zigzag64,16,opt,name=delta_option_6w" json:"delta_option_6w,omitempty"`
	DeltaOption_7W       *int64   `protobuf:"zigzag64,17,opt,name=delta_option_7w" json:"delta_option_7w,omitempty"`
	DeltaOption_8W       *int64   `protobuf:"zigzag64,18,opt,name=delta_option_8w" json:"delta_option_8w,omitempty"`
	DeltaOption_9W       *int64   `protobuf:"zigzag64,19,opt,name=delta_option_9w" json:"delta_option_9w,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpHeader) Reset()         { *m = TcpHeader{} }
func (m *TcpHeader) String() string { return proto.CompactTextString(m) }
func (*TcpHeader) ProtoMessage()    {}
func (*TcpHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{8}
}
func (m *TcpHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpHeader.Unmarshal(m, b)
}
func (m *TcpHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpHeader.Marshal(b, m, deterministic)
}
func (dst *TcpHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpHeader.Merge(dst, src)
}
func (m *TcpHeader) XXX_Size() int {
	return xxx_messageInfo_TcpHeader.Size(m)
}
func (m *TcpHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TcpHeader proto.InternalMessageInfo

func (m *TcpHeader) GetSourcePort() uint32 {
	if m != nil && m.SourcePort != nil {
		return *m.SourcePort
	}
	return 0
}

func (m *TcpHeader) GetDestinationPort() uint32 {
	if m != nil && m.DestinationPort != nil {
		return *m.DestinationPort
	}
	return 0
}

func (m *TcpHeader) GetDeltaSequenceNumber() int64 {
	if m != nil && m.DeltaSequenceNumber != nil {
		return *m.DeltaSequenceNumber
	}
	return 0
}

func (m *TcpHeader) GetDeltaAcknowledgementNumber() int64 {
	if m != nil && m.DeltaAcknowledgementNumber != nil {
		return *m.DeltaAcknowledgementNumber
	}
	return 0
}

func (m *TcpHeader) GetDataOffset() uint32 {
	if m != nil && m.DataOffset != nil {
		return *m.DataOffset
	}
	return 0
}

func (m *TcpHeader) GetReserved() uint32 {
	if m != nil && m.Reserved != nil {
		return *m.Reserved
	}
	return 0
}

func (m *TcpHeader) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *TcpHeader) GetDeltaWindow() int32 {
	if m != nil && m.DeltaWindow != nil {
		return *m.DeltaWindow
	}
	return 0
}

func (m *TcpHeader) GetUrgentPointer() uint32 {
	if m != nil && m.UrgentPointer != nil {
		return *m.UrgentPointer
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_0W() int64 {
	if m != nil && m.DeltaOption_0W != nil {
		return *m.DeltaOption_0W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_1W() int64 {
	if m != nil && m.DeltaOption_1W != nil {
		return *m.DeltaOption_1W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_2W() int64 {
	if m != nil && m.DeltaOption_2W != nil {
		return *m.DeltaOption_2W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_3W() int64 {
	if m != nil && m.DeltaOption_3W != nil {
		return *m.DeltaOption_3W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_4W() int64 {
	if m != nil && m.DeltaOption_4W != nil {
		return *m.DeltaOption_4W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_5W() int64 {
	if m != nil && m.DeltaOption_5W != nil {
		return *m.DeltaOption_5W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_6W() int64 {
	if m != nil && m.DeltaOption_6W != nil {
		return *m.DeltaOption_6W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_7W() int64 {
	if m != nil && m.DeltaOption_7W != nil {
		return *m.DeltaOption_7W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_8W() int64 {
	if m != nil && m.DeltaOption_8W != nil {
		return *m.DeltaOption_8W
	}
	return 0
}

func (m *TcpHeader) GetDeltaOption_9W() int64 {
	if m != nil && m.DeltaOption_9W != nil {
		return *m.DeltaOption_9W
	}
	return 0
}

type UdpHeader struct {
	SourcePort           *uint32  `protobuf:"varint,1,opt,name=source_port" json:"source_port,omitempty"`
	DestinationPort      *uint32  `protobuf:"varint,2,opt,name=destination_port" json:"destination_port,omitempty"`
	Length               *uint32  `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UdpHeader) Reset()         { *m = UdpHeader{} }
func (m *UdpHeader) String() string { return proto.CompactTextString(m) }
func (*UdpHeader) ProtoMessage()    {}
func (*UdpHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{9}
}
func (m *UdpHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UdpHeader.Unmarshal(m, b)
}
func (m *UdpHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UdpHeader.Marshal(b, m, deterministic)
}
func (dst *UdpHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UdpHeader.Merge(dst, src)
}
func (m *UdpHeader) XXX_Size() int {
	return xxx_messageInfo_UdpHeader.Size(m)
}
func (m *UdpHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_UdpHeader.DiscardUnknown(m)
}

var xxx_messageInfo_UdpHeader proto.InternalMessageInfo

func (m *UdpHeader) GetSourcePort() uint32 {
	if m != nil && m.SourcePort != nil {
		return *m.SourcePort
	}
	return 0
}

func (m *UdpHeader) GetDestinationPort() uint32 {
	if m != nil && m.DestinationPort != nil {
		return *m.DestinationPort
	}
	return 0
}

func (m *UdpHeader) GetLength() uint32 {
	if m != nil && m.Length != nil {
		return *m.Length
	}
	return 0
}

type PacketHeader struct {
	DeltaTimestamp       *int64          `protobuf:"zigzag64,1,opt,name=delta_timestamp" json:"delta_timestamp,omitempty"`
	Ethernet             *EthernetHeader `protobuf:"bytes,2,opt,name=ethernet" json:"ethernet,omitempty"`
	Ipv4                 *Ipv4Header     `protobuf:"bytes,3,opt,name=ipv4" json:"ipv4,omitempty"`
	Tcp                  *TcpHeader      `protobuf:"bytes,4,opt,name=tcp" json:"tcp,omitempty"`
	Udp                  *UdpHeader      `protobuf:"bytes,5,opt,name=udp" json:"udp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PacketHeader) Reset()         { *m = PacketHeader{} }
func (m *PacketHeader) String() string { return proto.CompactTextString(m) }
func (*PacketHeader) ProtoMessage()    {}
func (*PacketHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{10}
}
func (m *PacketHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PacketHeader.Unmarshal(m, b)
}
func (m *PacketHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PacketHeader.Marshal(b, m, deterministic)
}
func (dst *PacketHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketHeader.Merge(dst, src)
}
func (m *PacketHeader) XXX_Size() int {
	return xxx_messageInfo_PacketHeader.Size(m)
}
func (m *PacketHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketHeader.DiscardUnknown(m)
}

var xxx_messageInfo_PacketHeader proto.InternalMessageInfo

func (m *PacketHeader) GetDeltaTimestamp() int64 {
	if m != nil && m.DeltaTimestamp != nil {
		return *m.DeltaTimestamp
	}
	return 0
}

func (m *PacketHeader) GetEthernet() *EthernetHeader {
	if m != nil {
		return m.Ethernet
	}
	return nil
}

func (m *PacketHeader) GetIpv4() *Ipv4Header {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *PacketHeader) GetTcp() *TcpHeader {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *PacketHeader) GetUdp() *UdpHeader {
	if m != nil {
		return m.Udp
	}
	return nil
}

// protobuf-message format
type FlowPktHdrBatch struct {
	Host      *uint32    `protobuf:"varint,1,opt,name=host" json:"host,omitempty"`
	FlowId    *uint64    `protobuf:"varint,2,opt,name=flow_id" json:"flow_id,omitempty"`
	Direction *Direction `protobuf:"varint,3,opt,name=direction,enum=DFI.Direction,def=0" json:"direction,omitempty"`
	Sequence  *uint32    `protobuf:"varint,4,opt,name=sequence" json:"sequence,omitempty"`
	// 连续多个PacketHeader序列化（压缩）以后的字节数组，最大长度为BUFFER_SIZE
	// 内存排布：header_0, ..., header_i, ..., header_n, 0xFF结束标记
	//   header_i排布：compressed_header_size_i(1B), compressed_header_i
	CompressedHeaders    []byte   `protobuf:"bytes,5,opt,name=compressed_headers" json:"compressed_headers,omitempty"`
	CloseType            *uint32  `protobuf:"varint,6,opt,name=close_type" json:"close_type,omitempty"`
	Exporter             *uint32  `protobuf:"varint,7,opt,name=exporter" json:"exporter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlowPktHdrBatch) Reset()         { *m = FlowPktHdrBatch{} }
func (m *FlowPktHdrBatch) String() string { return proto.CompactTextString(m) }
func (*FlowPktHdrBatch) ProtoMessage()    {}
func (*FlowPktHdrBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfi_3c8cabeb68fe5da6, []int{11}
}
func (m *FlowPktHdrBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowPktHdrBatch.Unmarshal(m, b)
}
func (m *FlowPktHdrBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowPktHdrBatch.Marshal(b, m, deterministic)
}
func (dst *FlowPktHdrBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowPktHdrBatch.Merge(dst, src)
}
func (m *FlowPktHdrBatch) XXX_Size() int {
	return xxx_messageInfo_FlowPktHdrBatch.Size(m)
}
func (m *FlowPktHdrBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowPktHdrBatch.DiscardUnknown(m)
}

var xxx_messageInfo_FlowPktHdrBatch proto.InternalMessageInfo

const Default_FlowPktHdrBatch_Direction Direction = Direction_FORWARD

func (m *FlowPktHdrBatch) GetHost() uint32 {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return 0
}

func (m *FlowPktHdrBatch) GetFlowId() uint64 {
	if m != nil && m.FlowId != nil {
		return *m.FlowId
	}
	return 0
}

func (m *FlowPktHdrBatch) GetDirection() Direction {
	if m != nil && m.Direction != nil {
		return *m.Direction
	}
	return Default_FlowPktHdrBatch_Direction
}

func (m *FlowPktHdrBatch) GetSequence() uint32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *FlowPktHdrBatch) GetCompressedHeaders() []byte {
	if m != nil {
		return m.CompressedHeaders
	}
	return nil
}

func (m *FlowPktHdrBatch) GetCloseType() uint32 {
	if m != nil && m.CloseType != nil {
		return *m.CloseType
	}
	return 0
}

func (m *FlowPktHdrBatch) GetExporter() uint32 {
	if m != nil && m.Exporter != nil {
		return *m.Exporter
	}
	return 0
}

func init() {
	proto.RegisterType((*FlowHeader)(nil), "DFI.FlowHeader")
	proto.RegisterType((*OvsPort)(nil), "DFI.OvsPort")
	proto.RegisterType((*OvsTopology)(nil), "DFI.OvsTopology")
	proto.RegisterType((*Request)(nil), "DFI.Request")
	proto.RegisterType((*Flow)(nil), "DFI.Flow")
	proto.RegisterType((*Metering)(nil), "DFI.Metering")
	proto.RegisterType((*EthernetHeader)(nil), "DFI.EthernetHeader")
	proto.RegisterType((*Ipv4Header)(nil), "DFI.Ipv4Header")
	proto.RegisterType((*TcpHeader)(nil), "DFI.TcpHeader")
	proto.RegisterType((*UdpHeader)(nil), "DFI.UdpHeader")
	proto.RegisterType((*PacketHeader)(nil), "DFI.PacketHeader")
	proto.RegisterType((*FlowPktHdrBatch)(nil), "DFI.FlowPktHdrBatch")
	proto.RegisterEnum("DFI.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("DFI.Direction", Direction_name, Direction_value)
}

func init() { proto.RegisterFile("dfi.proto", fileDescriptor_dfi_3c8cabeb68fe5da6) }

var fileDescriptor_dfi_3c8cabeb68fe5da6 = []byte{
	// 1651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x5b, 0x73, 0xdb, 0x4e,
	0x15, 0x47, 0xb1, 0x13, 0xc7, 0x47, 0xbe, 0x45, 0x4e, 0xf2, 0xdf, 0xfe, 0xd3, 0x14, 0xd7, 0x43,
	0x67, 0xd2, 0xc0, 0xb8, 0x51, 0x92, 0xb6, 0xd0, 0x19, 0x2e, 0x2d, 0x71, 0x9a, 0xb4, 0x4d, 0x9d,
	0x49, 0x43, 0x0b, 0xbc, 0xec, 0x28, 0xd2, 0x5a, 0x16, 0x91, 0x25, 0xa1, 0x5d, 0x5b, 0x75, 0x81,
	0x19, 0xee, 0x94, 0xfb, 0xfd, 0x05, 0x86, 0x19, 0xe0, 0x85, 0x57, 0x3e, 0x03, 0xdf, 0x83, 0x2f,
	0xc1, 0x27, 0x60, 0x76, 0xb5, 0x6b, 0xcb, 0x89, 0xdd, 0x87, 0xff, 0x9b, 0xfd, 0xfb, 0x9d, 0x3d,
	0x7b, 0xce, 0xd1, 0xb9, 0x2d, 0x14, 0x9d, 0xae, 0xd7, 0x8a, 0xe2, 0x90, 0x85, 0x46, 0xee, 0xe0,
	0xf0, 0xb8, 0x79, 0x0b, 0xe0, 0xd0, 0x0f, 0x93, 0x23, 0x62, 0x39, 0x24, 0x36, 0x6a, 0xb0, 0x4c,
	0xc9, 0xb7, 0x07, 0x24, 0xb0, 0x09, 0xd2, 0x1a, 0x0b, 0x5b, 0x4b, 0xcd, 0x73, 0x28, 0x74, 0x86,
	0xf4, 0x34, 0x8c, 0x99, 0xa1, 0x43, 0xae, 0x6f, 0xd9, 0x48, 0x6b, 0x68, 0x5b, 0x45, 0xa3, 0x0a,
	0x05, 0x27, 0xc2, 0x51, 0x18, 0x33, 0xb4, 0xd0, 0xd0, 0xb6, 0xca, 0xc6, 0x3a, 0x54, 0xbc, 0x80,
	0x91, 0xb8, 0x6b, 0xd9, 0x04, 0x07, 0x56, 0x9f, 0xa0, 0x9c, 0x10, 0xac, 0x83, 0x7e, 0x11, 0x7b,
	0x8e, 0x2b, 0xc1, 0x3c, 0x07, 0x9b, 0xdb, 0xa0, 0x77, 0x86, 0xf4, 0x3c, 0x8c, 0x42, 0x3f, 0x74,
	0x47, 0xc6, 0x06, 0x2c, 0x72, 0x4d, 0x14, 0x69, 0x8d, 0xdc, 0x96, 0xbe, 0x5b, 0x6a, 0x1d, 0x1c,
	0x1e, 0xb7, 0xe4, 0xb5, 0xcd, 0xbb, 0x50, 0x38, 0xe3, 0x36, 0x51, 0x66, 0xdc, 0x82, 0x3c, 0x1b,
	0x45, 0x44, 0x98, 0x50, 0xd9, 0xad, 0x09, 0x31, 0xc9, 0x9d, 0x8f, 0x22, 0xd2, 0xfc, 0x5f, 0x19,
	0xf2, 0xdc, 0x1b, 0xee, 0x07, 0x79, 0xcb, 0x55, 0x92, 0x58, 0x9a, 0x67, 0x00, 0xd8, 0x7e, 0x48,
	0x09, 0x16, 0x0a, 0x0a, 0x02, 0xab, 0x42, 0xa1, 0xeb, 0x87, 0x09, 0xf6, 0x1c, 0xb4, 0xdc, 0xd0,
	0xb6, 0xf2, 0x5c, 0x88, 0x32, 0x2b, 0x66, 0x98, 0x79, 0x7d, 0x82, 0x74, 0x21, 0xc4, 0x55, 0x05,
	0x4e, 0x8a, 0x94, 0x14, 0xe2, 0x0c, 0x62, 0x8b, 0x79, 0x61, 0x80, 0xca, 0xe2, 0xdc, 0x2a, 0x14,
	0xbd, 0x40, 0x04, 0x03, 0xef, 0xa0, 0x35, 0x2e, 0xf4, 0x48, 0xdb, 0x31, 0xaa, 0x90, 0x1f, 0xfa,
	0x56, 0x80, 0x3e, 0xad, 0x80, 0x3a, 0x2c, 0x13, 0xd6, 0x4b, 0x2d, 0x68, 0x28, 0xd0, 0x80, 0x42,
	0xdf, 0xb2, 0x31, 0x8d, 0x6d, 0x74, 0x9b, 0x2b, 0xcb, 0x60, 0x0e, 0x65, 0xa8, 0xa9, 0xb0, 0x0a,
	0x2c, 0x79, 0x91, 0x10, 0xbb, 0x2b, 0xac, 0x48, 0xff, 0x73, 0x91, 0x6d, 0x69, 0xd5, 0xa2, 0xf8,
	0xac, 0x68, 0x4f, 0x69, 0xae, 0xc1, 0xb2, 0x30, 0x89, 0x9f, 0xd9, 0x57, 0x96, 0x0b, 0x84, 0x9f,
	0xba, 0x2f, 0xbf, 0x9a, 0xce, 0xec, 0x08, 0x77, 0x7d, 0xcb, 0xa5, 0x78, 0x07, 0x3d, 0x50, 0x67,
	0xa7, 0x70, 0x13, 0x3d, 0x54, 0xf8, 0x0a, 0x2c, 0xb1, 0x41, 0xc0, 0x23, 0xf6, 0x45, 0x65, 0xd8,
	0x1a, 0x80, 0x80, 0x52, 0xe3, 0xbe, 0xa4, 0x24, 0x27, 0x30, 0xbf, 0xed, 0xcb, 0x99, 0x18, 0x70,
	0x58, 0xc4, 0xe0, 0x2b, 0x19, 0x15, 0x17, 0x23, 0x46, 0xb0, 0x1d, 0xf0, 0x00, 0x3e, 0x9d, 0x05,
	0x9b, 0xe8, 0x48, 0xc1, 0xab, 0x50, 0x8c, 0x2e, 0x99, 0x14, 0x3e, 0x9e, 0x81, 0x9a, 0xe8, 0x99,
	0x42, 0x37, 0xa0, 0xc6, 0x42, 0x66, 0xf9, 0x38, 0xa3, 0xff, 0xf9, 0x7c, 0xd2, 0x44, 0x2f, 0x14,
	0xf9, 0x31, 0x54, 0x53, 0x72, 0x72, 0xd7, 0xc9, 0x5c, 0xce, 0x44, 0x2f, 0x15, 0xb7, 0x0e, 0x3a,
	0x1d, 0x5c, 0x04, 0x84, 0x61, 0xcf, 0xc1, 0x3b, 0xc8, 0xc9, 0x44, 0x74, 0x82, 0x9b, 0x88, 0x28,
	0x7c, 0x03, 0x6a, 0xfe, 0x1e, 0x76, 0xc8, 0xd0, 0xb3, 0xd3, 0xe4, 0xc4, 0x3b, 0xa8, 0x3b, 0x9f,
	0x34, 0x91, 0xab, 0xc8, 0x1b, 0x50, 0x99, 0x90, 0xe2, 0xb2, 0xde, 0x3c, 0xca, 0x44, 0x5e, 0xc6,
	0x0e, 0x7f, 0x0f, 0x93, 0xc8, 0x4e, 0x8f, 0x7c, 0x6b, 0x26, 0x6e, 0xa2, 0x4b, 0x85, 0x57, 0x60,
	0xa9, 0x17, 0x52, 0xee, 0xbe, 0xaf, 0xf2, 0x4e, 0xfc, 0x37, 0x51, 0x5f, 0xfc, 0xe7, 0x49, 0xad,
	0x94, 0xbd, 0xcd, 0x66, 0xba, 0xd2, 0x34, 0x52, 0x20, 0x82, 0xf2, 0xb4, 0x9b, 0xef, 0xe6, 0x30,
	0x26, 0xfa, 0x4e, 0xc6, 0xaa, 0xac, 0x83, 0xdf, 0x9d, 0x89, 0x9b, 0xe8, 0x7b, 0x93, 0xac, 0x2b,
	0x7a, 0x5d, 0xa5, 0xff, 0xfb, 0xda, 0x0c, 0xd8, 0x44, 0x3f, 0xd0, 0x26, 0xe1, 0xd5, 0x3d, 0x8a,
	0xfd, 0x5d, 0xcc, 0x2b, 0x7c, 0x07, 0xfd, 0x90, 0x13, 0xcb, 0x8f, 0x16, 0xbb, 0x96, 0x4f, 0xc9,
	0x34, 0x69, 0xa2, 0x1f, 0xcd, 0x22, 0xf7, 0xe4, 0xc9, 0x1f, 0xcf, 0x27, 0x4d, 0xf4, 0x93, 0x29,
	0x72, 0x15, 0x74, 0x37, 0x0e, 0x07, 0x11, 0xf6, 0x1c, 0x5e, 0x71, 0x3f, 0xe5, 0x2d, 0xaf, 0x3c,
	0x8d, 0x9a, 0xe8, 0x67, 0x29, 0xba, 0x09, 0xab, 0x49, 0xcf, 0x63, 0xc4, 0xf7, 0x28, 0xc3, 0xf1,
	0xc0, 0x27, 0xf2, 0xd0, 0xfb, 0x0f, 0xd1, 0x26, 0xfa, 0x79, 0x4a, 0xdf, 0x80, 0x9a, 0x3d, 0xa0,
	0x2c, 0xec, 0x63, 0x66, 0xb9, 0xf2, 0xe4, 0x2f, 0xe6, 0x51, 0x26, 0xfa, 0x65, 0x4a, 0xd5, 0xa1,
	0x10, 0x33, 0x86, 0xe9, 0x28, 0x40, 0xbf, 0xd2, 0x54, 0x52, 0x57, 0x21, 0x17, 0x33, 0x86, 0x7e,
	0x3d, 0x06, 0xa4, 0x94, 0x35, 0x74, 0xd1, 0x6f, 0xc6, 0xe0, 0x26, 0xac, 0xd0, 0x51, 0x80, 0x63,
	0xc2, 0x62, 0x2b, 0xa0, 0xb2, 0x68, 0x7e, 0xfb, 0x21, 0xda, 0x44, 0xbf, 0x1b, 0xd3, 0x37, 0xa0,
	0x3c, 0x7d, 0xf2, 0xf7, 0xf3, 0x28, 0x13, 0xfd, 0x21, 0xab, 0x34, 0x2d, 0xc5, 0x8c, 0x00, 0xfa,
	0xa3, 0x36, 0xa9, 0xd4, 0xca, 0x3b, 0x12, 0x87, 0x38, 0x09, 0x1c, 0xa9, 0xf5, 0x4f, 0x73, 0x39,
	0x13, 0xfd, 0x39, 0x7b, 0x63, 0x44, 0x7b, 0x78, 0x10, 0xbb, 0xf2, 0xd8, 0x5f, 0xe6, 0x51, 0x26,
	0xfa, 0x6b, 0x36, 0x2a, 0x7c, 0x7a, 0xf0, 0xa8, 0xfc, 0x6d, 0x0c, 0xde, 0x84, 0x9a, 0x35, 0x74,
	0x45, 0xab, 0x10, 0x03, 0x72, 0x68, 0xf9, 0xe8, 0xef, 0x63, 0xf6, 0x36, 0xac, 0x65, 0x19, 0x3c,
	0xb4, 0x62, 0xcf, 0xe2, 0xe3, 0xf7, 0x1f, 0x59, 0x17, 0xb9, 0x08, 0xf5, 0xde, 0x91, 0x09, 0xfd,
	0x4f, 0x45, 0x37, 0xff, 0xb3, 0x00, 0xcb, 0x27, 0x84, 0x91, 0xd8, 0x0b, 0xdc, 0xa9, 0xc1, 0x27,
	0xd2, 0xdc, 0x58, 0x81, 0x22, 0x9f, 0x5d, 0x94, 0x59, 0xfd, 0x48, 0xce, 0xc2, 0xa9, 0x71, 0x95,
	0xbb, 0x3a, 0xae, 0xf4, 0x4c, 0xaf, 0x97, 0x4d, 0x7d, 0x6d, 0x1a, 0xe2, 0x0d, 0x7d, 0x7d, 0x32,
	0x65, 0xe4, 0xdc, 0xc9, 0x8e, 0xb9, 0xf1, 0xdc, 0x69, 0x5c, 0x05, 0xf9, 0xd9, 0xdb, 0x99, 0x19,
	0x91, 0xe9, 0xcb, 0x77, 0x67, 0xf7, 0xfd, 0xed, 0x99, 0x7d, 0xff, 0xb3, 0x33, 0xfb, 0xfe, 0xe7,
	0x32, 0x5d, 0x38, 0xdb, 0xe5, 0xf6, 0xe6, 0x74, 0xb9, 0x7d, 0x89, 0x37, 0x2f, 0xa1, 0xd2, 0x66,
	0x3d, 0x12, 0x07, 0x84, 0xc9, 0x55, 0x68, 0x03, 0xea, 0x0e, 0xa1, 0xcc, 0x0b, 0xc4, 0xa0, 0xc7,
	0x96, 0xe3, 0xc4, 0x84, 0x52, 0x11, 0xd4, 0x3c, 0x5f, 0x76, 0x68, 0x38, 0x88, 0x6d, 0x32, 0xc6,
	0x17, 0xd4, 0x02, 0x41, 0xb8, 0x9a, 0x74, 0xbe, 0xe5, 0xd4, 0xd0, 0xe5, 0x71, 0xe5, 0x95, 0x26,
	0xb6, 0x9f, 0x72, 0xf3, 0xfd, 0x02, 0xc0, 0x71, 0x34, 0xdc, 0x97, 0x37, 0x55, 0xa1, 0x30, 0x24,
	0x31, 0xe5, 0xeb, 0x44, 0xfa, 0xc9, 0x74, 0xc8, 0x79, 0x3d, 0x5f, 0x7e, 0x2c, 0x1d, 0x72, 0x2c,
	0xa4, 0x52, 0xd7, 0x2a, 0x94, 0xd2, 0x6c, 0xf7, 0x49, 0xe0, 0xb2, 0x5e, 0xaa, 0xcf, 0xb8, 0x09,
	0xab, 0x0e, 0xf1, 0x99, 0x85, 0x3d, 0x87, 0x04, 0xcc, 0xeb, 0x7a, 0x76, 0xba, 0x9c, 0x2c, 0x36,
	0xb4, 0xad, 0x15, 0x63, 0x13, 0xd6, 0x52, 0xb6, 0x1b, 0x5b, 0x6e, 0x9f, 0x04, 0x0c, 0x87, 0xdd,
	0x2e, 0x25, 0x0c, 0x2d, 0x09, 0x9a, 0xeb, 0x67, 0xbe, 0xdc, 0x88, 0xf8, 0x82, 0xc0, 0x3f, 0xa6,
	0x1d, 0xfa, 0x62, 0x25, 0x2a, 0x1b, 0x1f, 0x41, 0xb5, 0x27, 0xcc, 0xc4, 0x76, 0x8f, 0xd8, 0x97,
	0x74, 0xd0, 0x47, 0x45, 0xb5, 0xef, 0x5d, 0x09, 0x01, 0x34, 0xb4, 0xad, 0xc2, 0xbc, 0xb8, 0xe9,
	0x82, 0xac, 0x42, 0x21, 0x8c, 0x38, 0x4e, 0xc5, 0x2e, 0x55, 0x6a, 0xfe, 0x37, 0x07, 0xc5, 0x73,
	0x3b, 0x92, 0x91, 0xa8, 0x83, 0x2e, 0x75, 0x8a, 0xc5, 0x32, 0x8d, 0x06, 0x82, 0x5a, 0x56, 0x61,
	0x66, 0xe5, 0x1c, 0x7b, 0xa6, 0x76, 0x56, 0x1c, 0x0c, 0xfa, 0x17, 0x24, 0x16, 0xc1, 0x32, 0x8c,
	0xcf, 0xc0, 0xcd, 0x94, 0xb6, 0xec, 0xcb, 0x20, 0x4c, 0x7c, 0xe2, 0xb8, 0x44, 0xf8, 0x2f, 0xa5,
	0xf2, 0x42, 0xaa, 0x0e, 0xba, 0x63, 0x31, 0x4b, 0x05, 0x65, 0x51, 0xc5, 0x21, 0x26, 0x94, 0xc4,
	0x43, 0xe2, 0x88, 0x30, 0x95, 0x8d, 0x32, 0x2c, 0x8a, 0x65, 0x48, 0x06, 0x6a, 0x15, 0x4a, 0xa9,
	0xee, 0xc4, 0x0b, 0x9c, 0x30, 0x11, 0xc1, 0x5a, 0xe1, 0x31, 0x19, 0xc4, 0x2e, 0xbf, 0x22, 0x0a,
	0x45, 0x45, 0xcb, 0x58, 0x7d, 0x04, 0xd5, 0x54, 0x3a, 0x75, 0x1e, 0xef, 0x24, 0x22, 0x58, 0xc6,
	0x35, 0xc2, 0x4c, 0x44, 0xa0, 0xae, 0x13, 0xbb, 0x89, 0x08, 0xd8, 0x75, 0x62, 0x2f, 0x11, 0x3b,
	0xe8, 0x75, 0x62, 0x3f, 0x41, 0x95, 0x99, 0xc4, 0xfd, 0x04, 0x55, 0x67, 0x12, 0x0f, 0x12, 0x54,
	0x9b, 0x49, 0x3c, 0x4c, 0xd0, 0xca, 0x4c, 0xe2, 0xf3, 0x09, 0x32, 0x66, 0x12, 0x5f, 0x48, 0x50,
	0x9d, 0x13, 0xcd, 0x67, 0x50, 0xfc, 0x9a, 0xf3, 0x09, 0x3f, 0x6f, 0x05, 0x96, 0x64, 0x9a, 0x8b,
	0xe4, 0x6f, 0xfe, 0x4b, 0x83, 0xd2, 0xa9, 0x65, 0x5f, 0x8e, 0x4b, 0x74, 0x7c, 0xeb, 0xa4, 0xc1,
	0x69, 0xc2, 0x9c, 0x3b, 0x62, 0xd1, 0x16, 0xd5, 0x2c, 0x74, 0xe9, 0xbb, 0x75, 0xf1, 0x56, 0xb8,
	0x52, 0xe2, 0x9b, 0x90, 0xf7, 0xa2, 0xe1, 0xbe, 0x50, 0xaf, 0xef, 0x56, 0x85, 0x48, 0xa6, 0x2e,
	0x37, 0x20, 0xc7, 0xec, 0x48, 0xa4, 0x89, 0xbe, 0x5b, 0x11, 0xec, 0x24, 0x55, 0x37, 0x20, 0x37,
	0x70, 0x22, 0x91, 0x2e, 0x8a, 0x1c, 0x3b, 0xda, 0xfc, 0xb7, 0x06, 0x55, 0xfe, 0x0e, 0x39, 0xbd,
	0x64, 0x47, 0x4e, 0xfc, 0xc4, 0x62, 0x76, 0xcf, 0x28, 0x41, 0x9e, 0xef, 0x4d, 0xd2, 0xeb, 0xcc,
	0xd3, 0x23, 0xed, 0x1c, 0xdb, 0x50, 0x74, 0xbc, 0x98, 0xd8, 0xa2, 0x70, 0x73, 0xe2, 0x7d, 0x93,
	0x6a, 0x3d, 0x50, 0xe8, 0xa3, 0xc2, 0x61, 0xe7, 0xec, 0xcd, 0xe3, 0xb3, 0x83, 0xa9, 0x57, 0x5a,
	0xda, 0x01, 0x3e, 0x06, 0xc3, 0x0e, 0xfb, 0x11, 0xaf, 0x34, 0xe2, 0xe0, 0xb4, 0x60, 0xa9, 0x30,
	0xae, 0x74, 0xe5, 0xe5, 0xb3, 0x34, 0x7e, 0xd4, 0xa8, 0x31, 0x21, 0x12, 0x7a, 0xfb, 0xeb, 0xa0,
	0x67, 0x5e, 0x52, 0x46, 0x15, 0xf4, 0xc3, 0x17, 0x9d, 0x37, 0xf8, 0xa8, 0xfd, 0xf8, 0xa0, 0x7d,
	0x56, 0xd3, 0x8c, 0x1a, 0x94, 0x3a, 0xaf, 0x5f, 0xe1, 0xf3, 0xce, 0x69, 0xe7, 0x45, 0xe7, 0xe9,
	0x37, 0x6a, 0x0b, 0xc6, 0x0a, 0x94, 0x4f, 0x1f, 0x7f, 0xf5, 0x79, 0xfb, 0x5c, 0x09, 0xe5, 0x8c,
	0x3a, 0x54, 0x4f, 0xda, 0xe7, 0xed, 0xb3, 0xe3, 0x97, 0x4f, 0x15, 0x98, 0xdf, 0xbe, 0x03, 0xc5,
	0xb1, 0x0f, 0x86, 0x0e, 0xca, 0x8b, 0xda, 0xa7, 0xf8, 0x9f, 0xb3, 0xf6, 0xeb, 0xf6, 0xd9, 0xab,
	0x76, 0x4d, 0x7b, 0x72, 0x04, 0xeb, 0x76, 0xd0, 0x0a, 0x08, 0x6b, 0x8d, 0x06, 0x01, 0xed, 0x59,
	0x41, 0xab, 0x4f, 0x28, 0xb5, 0x5c, 0xf2, 0x04, 0x0e, 0x0e, 0x8f, 0x4f, 0xd2, 0xdf, 0xdf, 0x6c,
	0xba, 0x1e, 0xf3, 0xad, 0x8b, 0xd6, 0xdb, 0x96, 0x6f, 0x05, 0xf7, 0xa4, 0xe4, 0x3d, 0x29, 0x79,
	0x2f, 0xba, 0x70, 0xba, 0xde, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x54, 0xff, 0x7f, 0xa2, 0xe3,
	0x0e, 0x00, 0x00,
}

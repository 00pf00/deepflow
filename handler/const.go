package handler

type HeaderType uint8

const HEADER_TYPE_INVALID HeaderType = 0

const HEADER_TYPE_L2 HeaderType = 0x1
const (
	HEADER_TYPE_ETH = HEADER_TYPE_L2 + iota
	HEADER_TYPE_ARP
)

const HEADER_TYPE_L3 = 0x20
const (
	HEADER_TYPE_IPV4 = HEADER_TYPE_L3 + iota
	HEADER_TYPE_IPV4_ICMP
)

const HEADER_TYPE_L4 = 0x80
const (
	HEADER_TYPE_IPV4_TCP = HEADER_TYPE_L4 + iota
	HEADER_TYPE_IPV4_UDP
)

var MIN_PACKET_SIZES = [...]int{
	HEADER_TYPE_ETH:       14,           // 不包括DOT1Q
	HEADER_TYPE_ARP:       14 + 28,      // 不包括DOT1Q
	HEADER_TYPE_IPV4:      14 + 20,      // 不包括DOT1Q + IPv4 option
	HEADER_TYPE_IPV4_ICMP: 14 + 20 + 8,  // 不包括DOT1Q + IPv4 option
	HEADER_TYPE_IPV4_TCP:  14 + 20 + 20, // 不包括DOT1Q + IPv4 option
	HEADER_TYPE_IPV4_UDP:  14 + 20 + 8,  // 不包括DOT1Q + IPv4 option
}

var MIN_HEADER_SIZES = [...]int{
	HEADER_TYPE_ETH:       14,
	HEADER_TYPE_ARP:       28,
	HEADER_TYPE_IPV4:      20,
	HEADER_TYPE_IPV4_ICMP: 8,
	HEADER_TYPE_IPV4_TCP:  20,
	HEADER_TYPE_IPV4_UDP:  8,
}

const (
	MAC_ADDR_LEN               = 6
	VLANTAG_LEN                = 2
	HEADER_TYPE_LEN            = 1
	PORT_LEN                   = 2
	IP_ADDR_LEN                = 4
	ETH_TYPE_LEN               = 2
	IPV4_TTL_LEN               = 1
	IPV4_PROTO_LEN             = 1
	IPV4_FLAGS_FRAG_OFFSET_LEN = 2
	TCP_WIN_LEN                = 2
	TUNNEL_TYPE_LEN            = 1
	TUNNEL_ID_LEN              = 3

	MAX_TCP_OPTION_SIZE = 40

	ETH_HEADER_SIZE   = MAC_ADDR_LEN*2 + ETH_TYPE_LEN
	ARP_HEADER_SIZE   = 28
	VXLAN_HEADER_SIZE = 8

	TCP_OPT_WIN_SCALE_LEN = 3
	TCP_OPT_MSS_LEN       = 4

	LAYER_TUNNEL_SIZE = IP_ADDR_LEN*2 + TUNNEL_TYPE_LEN + TUNNEL_ID_LEN
	LAYER_L2_SIZE     = HEADER_TYPE_LEN + MAC_ADDR_LEN*2 + VLANTAG_LEN
	LAYER_L3_SIZE     = IP_ADDR_LEN*2 + 6 // DATAOFF_IHL(1B) + ID...TTL(5B)
)

var MAX_COMPRESSED_PACKET_SIZE = [...]int{
	HEADER_TYPE_ETH:       LAYER_L2_SIZE + ETH_TYPE_LEN,
	HEADER_TYPE_ARP:       LAYER_L2_SIZE + ARP_HEADER_SIZE,
	HEADER_TYPE_IPV4:      LAYER_L2_SIZE + LAYER_L3_SIZE + IPV4_PROTO_LEN,
	HEADER_TYPE_IPV4_ICMP: LAYER_L2_SIZE + LAYER_L3_SIZE + 34,              // type + code + REST = 1 + 1 + 32 = 34
	HEADER_TYPE_IPV4_TCP:  LAYER_L2_SIZE + LAYER_L3_SIZE + PORT_LEN*2 + 11, // SEQ...ACK(8B) + FLAG...WIN(3B)
	HEADER_TYPE_IPV4_UDP:  LAYER_L2_SIZE + LAYER_L3_SIZE + PORT_LEN*2,
}

const (
	FIELD_DA = iota
	FIELD_SA
	FIELD_VLANTAG
	FIELD_ETH_TYPE

	FIELD_ARP

	FIELD_IHL
	FIELD_TOTAL_LEN
	FIELD_ID
	FIELD_FRAG
	FIELD_TTL
	FIELD_PROTO
	FIELD_SIP
	FIELD_DIP

	FIELD_ICMP_TYPE_CODE
	FIELD_ICMP_ID_SEQ
	FIELD_ICMP_REST

	FIELD_SPORT
	FIELD_DPORT

	FIELD_TCP_SEQ
	FIELD_TCP_ACK
	FIELD_TCP_DATAOFF
	FIELD_TCP_FLAG
	FIELD_TCP_WIN

	FIELD_VXLAN_FLAGS
	FIELD_VXLAN_VNI
)

const (
	OFFSET_DA          = 0
	OFFSET_SA          = OFFSET_DA + MAC_ADDR_LEN
	OFFSET_ETH_TYPE    = OFFSET_SA + MAC_ADDR_LEN
	OFFSET_IP_PROTOCOL = 23
	OFFSET_SIP         = 26
	OFFSET_DIP         = 30
	OFFSET_DPORT       = 36
	OFFSET_VXLAN_FLAGS = 42
	OFFSET_VXLAN_VNI   = 46
)

const (
	FIELD_DA_OFFSET      = 0
	FIELD_SA_OFFSET      = 6
	FIELD_VLANTAG_OFFSET = 14
	// 在此之后按需增加4B的DOT1Q偏移量
	FIELD_ETH_TYPE_OFFSET = 12

	FIELD_ARP_OFFSET = 14

	FIELD_IHL_OFFSET       = 14
	FIELD_TOTAL_LEN_OFFSET = 16
	FIELD_ID_OFFSET        = 18
	FIELD_FRAG_OFFSET      = 20
	FIELD_TTL_OFFSET       = 22
	FIELD_PROTO_OFFSET     = 23
	FIELD_SIP_OFFSET       = 26
	FIELD_DIP_OFFSET       = 30
	// 在此之后按需增加(4+IHL*-20)B的DOT1Q + IPv4 option偏移量

	FIELD_ICMP_TYPE_CODE_OFFSET = 34
	FIELD_ICMP_ID_SEQ_OFFSET    = 38
	FIELD_ICMP_REST_OFFSET      = 38

	FIELD_SPORT_OFFSET = 34
	FIELD_DPORT_OFFSET = 36

	FIELD_TCP_SEQ_OFFSET     = 38
	FIELD_TCP_ACK_OFFSET     = 42
	FIELD_TCP_DATAOFF_OFFSET = 46
	FIELD_TCP_FLAG_OFFSET    = 47
	FIELD_TCP_WIN_OFFSET     = 48

	FIELD_VXLAN_FLAGS_OFFSET = 42
	FIELD_VXLAN_VNI_OFFSET   = 46
)

const (
	FIELD_DA_LEN       = 6
	FIELD_SA_LEN       = 6
	FIELD_VLANTAG_LEN  = 2
	FIELD_ETH_TYPE_LEN = 2

	FIELD_ARP_LEN = 28

	FIELD_IHL_LEN       = 1
	FIELD_TOTAL_LEN_LEN = 2
	FIELD_ID_LEN        = 2
	FIELD_FRAG_LEN      = 2
	FIELD_TTL_LEN       = 1
	FIELD_PROTO_LEN     = 1
	FIELD_SIP_LEN       = 4
	FIELD_DIP_LEN       = 4

	FIELD_ICMP_TYPE_CODE_LEN = 2
	FIELD_ICMP_ID_SEQ_LEN    = 4
	FIELD_ICMP_REST_LEN      = 28

	FIELD_SPORT_LEN = 2
	FIELD_DPORT_LEN = 2

	FIELD_TCP_SEQ_LEN     = 4
	FIELD_TCP_ACK_LEN     = 4
	FIELD_TCP_DATAOFF_LEN = 1
	FIELD_TCP_FLAG_LEN    = 1
	FIELD_TCP_WIN_LEN     = 2

	FIELD_VXLAN_FLAGS_LEN = 1
	FIELD_VXLAN_VNI_LEN   = 3
)

const (
	TCP_OPT_FLAG_WIN_SCALE   = 1 << iota // 0000 0001
	TCP_OPT_FLAG_MSS                     // 0000 0010
	TCP_OPT_FLAG_SACK_PERMIT             // 0000 0100
	TCP_OPT_FLAG_SACK        = 0x38      // 0011 1000, 同时也表示SACK的字节数，不要修改
)

const (
	IPV4_FRAG_DONT_FRAGMENT = 0x4000
	IPV4_FRAG_MORE_FRAGMENT = 0x2000
	IPV4_FRAG_OFFSET_MASK   = 0x1fff
)
